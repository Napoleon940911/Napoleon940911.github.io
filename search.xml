<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-16：IIC/I2C接口的0.96寸OLED液晶显示屏</title>
      <link href="/zigbee-3.0-2-4-16/"/>
      <url>/zigbee-3.0-2-4-16/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><h1 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h1><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-04：模板工程创建/编译/下载-Application</title>
      <link href="/zigbee-3.0-2-3-4/"/>
      <url>/zigbee-3.0-2-3-4/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><h1 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h1><p>启动运行 <font color='red'><strong>Simplicity Studio</strong></font> 之后，在软件界面最上面的菜单栏中依次找到并点击 File -&gt; New -&gt; Silion Labs Project Wizard，在弹窗中清除掉原本所有默认的选项，然后从上到下依次配置好如下三项即可：</p><ul><li><font color='red'><strong>Target Device</strong></font></li><li><font color='red'><strong>SDK</strong></font></li><li><font color='red'><strong>IDE / Toolchain</strong></font></li></ul><p>这里以 <font color='red'><strong>EFR32MG21A020F768</strong></font> 为例，如下图所示：</p><p><img src="wizard1.png"></p><p><font color='red'><em>（注：Target Device 的位置，应该按自己实际所用芯片进行搜索选择。）</em></font></p><p>点击上图中的 <font color='red'><strong>NEXT</strong></font>，进入下图所示界面：</p><p><img src="wizard2.png"></p><p>在上图中的筛选框内输入 <font color='red'><strong>minimal</strong></font> 并回车，最终筛选搜索结果如下图所示：</p><p><img src="wizard3.png"></p><p>选中搜索结果中的 <font color='red'><strong>ZigbeeMinimal</strong></font> 并点击 <font color='red'><strong>NEXT</strong></font>，进入下图所示界面：</p><p><img src="wizard4.png"></p><p>这里大家可以根据自己的需求进行适当修改，也可以全部保持默认。最后点击 <font color='red'><strong>FINISH</strong></font>，即完成了工程的创建，如下图所示：</p><p><img src="ok.png"></p><h1 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h1><p>首先选中界面左上角 <font color='red'><strong>Project Explorer</strong></font> 中的工程名，然后点击右上角圈出的 <font color='red'><strong>小锤子</strong></font> 的图标，即可开始编译。编译结果如下图所示：</p><p><img src="build_failure.png"></p><p>从上图中可以看出，新建的 <font color='red'><strong>Application</strong></font> 的工程，如果不经任何改动的话，是编译不过的，会报很多的 <font color='red'><strong>error</strong></font> 和 <font color='red'><strong>warning</strong></font>。</p><h1 id="三、修改工程"><a href="#三、修改工程" class="headerlink" title="三、修改工程"></a>三、修改工程</h1><p>其实需要修改的地方不多，主要就 <font color='red'><strong>2</strong></font> 处就可以了。接下来打开工程里面的 <font color='red'><strong>slcp</strong></font> 文件，界面如下图所示：</p><p><img src="components.png"></p><p>从上图可以看出，新版 <font color='red'><strong>SDK</strong></font> 的开发跟以前相比有了很大的变化。感兴趣的可以自行进行新老版本的对比，这里就不再赘述。</p><h2 id="3-1-配置-vcom"><a href="#3-1-配置-vcom" class="headerlink" title="3.1 配置 vcom"></a>3.1 配置 vcom</h2><p>选中 <font color='red'><strong>SOFTWARE COMPONENTS</strong></font> 之后，在右上角的搜索框内搜索 <font color='red'><strong>vcom</strong></font>，搜索结果如下图所示：</p><p><img src="vcom1.png"></p><p>点击上图中的 <font color='red'><strong>Configure</strong></font> 对 <font color='red'><strong>vcom</strong></font> 进行配置，进入下图所示界面：</p><p><img src="vcom2.png"></p><p>从上图可以看出，这里本质上主要就是对于 <font color='red'><strong>串口</strong></font> 的配置，我们的开发板上用于 <font color='red'><strong>调试使用</strong></font> 的串口引脚就是 <font color='red'><strong>PD0</strong></font> 和 <font color='red'><strong>PD1</strong></font>，如下图所示：</p><p><img src="NZSA.png"></p><p>那么我们按下图进行配置即可：</p><p><img src="vcom3.png"></p><p>如果使用的是其他硬件，需要根据实际情况进行调整。</p><h2 id="3-2-删除led0"><a href="#3-2-删除led0" class="headerlink" title="3.2 删除led0"></a>3.2 删除led0</h2><p>同样的方式，我们搜索 <font color='red'><strong>led</strong></font>，可以找到 <font color='red'><strong>led0</strong></font>。</p><p><img src="led.png"></p><p>这里简单起见，我们按上图的提示直接 <font color='red'><strong>Uninstall</strong></font> 即可。</p><h1 id="四、再编译"><a href="#四、再编译" class="headerlink" title="四、再编译"></a>四、再编译</h1><p>再次编译，编译结果如下图所示：</p><p><img src="build_ok.png"></p><p>从上图中可以看出，工程成功编译通过了。编译生成的固件在该工程的 <font color='red'><strong>GNU ARM v10.2.1 - Default</strong></font> 目录下，如下图所示：</p><p><img src="s37.png"></p><p>从上图中可以看出，编译同时生成了 <font color='red'><strong>bin</strong></font>、<font color='red'><strong>hex</strong></font>、<font color='red'><strong>s37</strong></font> 等多种格式的固件。一般来说，我们会选择使用 <font color='red'><strong>s37</strong></font> 格式的固件。</p><h1 id="五、下载"><a href="#五、下载" class="headerlink" title="五、下载"></a>五、下载</h1><p><font color='red'><em>（注：在下载 Application 固件之前，请确保已经先下载过 BootLoader 固件。）</em></font></p><p>关于如何下载 <font color='red'><strong>Application</strong></font> 固件，参阅下面两篇文章中的任意一篇即可：</p><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-3-8/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-08：烧录固件之J-Link+Simplicity Commander</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-9/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-09：烧录固件之J-Link+J-Flash Lite</a></li></ul><p>本文创建的最简单的 <font color='red'><strong>Application</strong></font> 工程的固件下载完成后，使系统复位一下，可以看到串口调试助手中有收到 EFR32 芯片的启动信息，如下图所示：</p><p><img src="application_init.png"></p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-03：模板工程创建/编译/下载-BootLoader</title>
      <link href="/zigbee-3.0-2-3-3/"/>
      <url>/zigbee-3.0-2-3-3/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><h1 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h1><p>启动运行 <font color='red'><strong>Simplicity Studio</strong></font> 之后，在软件界面最上面的菜单栏中依次找到并点击 File -&gt; New -&gt; Silion Labs Project Wizard，在弹窗中清除掉原本所有默认的选项，然后从上到下依次配置好如下三项即可：</p><ul><li><font color='red'><strong>Target Device</strong></font></li><li><font color='red'><strong>SDK</strong></font></li><li><font color='red'><strong>IDE / Toolchain</strong></font></li></ul><p>这里以 <font color='red'><strong>EFR32MG21A020F768</strong></font> 为例，如下图所示：</p><p><img src="wizard1.png"></p><p><font color='red'><em>（注：Target Device 的位置，应该按自己实际所用芯片进行搜索选择。）</em></font></p><p>点击上图中的 <font color='red'><strong>NEXT</strong></font>，进入下图所示界面：</p><p><img src="wizard2.png"></p><p>选中上图中 <font color='red'><strong>Technology Type</strong></font> 下的 <font color='red'><strong>Bootloader</strong></font> 之后，界面变成如下图所示：</p><p><img src="wizard4.png"></p><p>选中搜索结果中的 <font color='red'><strong>Internal Storage Bootloader (single image on 512kB device)</strong></font> 并点击 <font color='red'><strong>NEXT</strong></font>，进入下图所示界面：</p><p><img src="finish.png"></p><p>这里大家可以根据自己的需求进行适当修改，也可以全部保持默认。最后点击 <font color='red'><strong>FINISH</strong></font>，即完成了工程的创建，如下图所示：</p><p><img src="build.png"></p><h1 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h1><p>首先选中界面左上角 <font color='red'><strong>Project Explorer</strong></font> 中的工程名，然后点击右上角圈出的 <font color='red'><strong>小锤子</strong></font> 的图标，即可开始编译。编译结果如下图所示：</p><p><img src="build_ok.png"></p><p>从上图中可以看出，这个 <font color='red'><strong>Internal Storage Bootloader</strong></font> 的工程创建之后，不用做任何修改就可编译通过。编译生成的固件在该工程的 <font color='red'><strong>GNU ARM v10.2.1 - Default</strong></font> 目录下，如下图所示：</p><p><img src="s37.png"></p><p>从上图中可以看出，编译同时生成了 <font color='red'><strong>bin</strong></font>、<font color='red'><strong>hex</strong></font>、<font color='red'><strong>s37</strong></font> 等多种格式的固件。一般来说，我们会选择使用 <font color='red'><strong>s37</strong></font> 格式的固件。</p><h1 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h1><p>关于如下下载 <font color='red'><strong>Bootloader</strong></font> 固件，参阅下面两篇文章中的任意一篇即可：</p><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-3-8/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-08：烧录固件之J-Link+Simplicity Commander</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-9/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-09：烧录固件之J-Link+J-Flash Lite</a></li></ul><p><font color='red'><strong>Bootloader</strong></font> 固件下载完成后，一般来说都是没什么现象的，主要的实验现象都体现在 <font color='red'><strong>Application</strong></font> 固件中。所以，一般需要把 <font color='red'><strong>Application</strong></font> 固件也下载完成之后，才能看到相应的实验现象。请继续阅读密切关联的下一篇文章：</p><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-3-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-04：模板工程创建/编译/下载-Application</a></li></ul><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-02：不同BootLoader之间的区别/如何选择</title>
      <link href="/zigbee-3.0-2-3-2/"/>
      <url>/zigbee-3.0-2-3-2/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><h1 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h1><p>启动运行 <font color='red'><strong>Simplicity Studio</strong></font> 之后，在软件界面最上面的菜单栏中依次找到并点击 File -&gt; New -&gt; Silion Labs Project Wizard，在弹窗中清除掉原本所有默认的选项，然后从上到下依次配置好如下三项即可：</p><ul><li><font color='red'><strong>Target Device</strong></font></li><li><font color='red'><strong>SDK</strong></font></li><li><font color='red'><strong>IDE / Toolchain</strong></font><br>如下图所示：</li></ul><p><img src="wizard1.png"></p><p><font color='red'><em>（注：Target Device 的位置，应该按自己实际所用芯片进行搜索选择。）</em></font></p><p>点击上图中的 <font color='red'><strong>NEXT</strong></font>，进入下图所示界面：</p><p><img src="wizard2.png"></p><p>选中上图中 <font color='red'><strong>Technology Type</strong></font> 下的 <font color='red'><strong>Bootloader</strong></font> 之后，界面变成如下图所示：</p><p><img src="wizard3.png"></p><p>从上图中就可以看到，Silicon Labs 的 <font color='red'><strong>Gecko SDK v4.0.2.0</strong></font> 中，总共提供了 <font color='red'><strong>15</strong></font> 种 <font color='red'><strong>BootLoader</strong></font> 供开发者选择（拉动上图中最右侧的滚动条，可以看到图中为显示的其他 <font color='red'><strong>BootLoader</strong></font>），但是我们实际开发过程中常用的 <font color='red'><strong>BootLoader</strong></font> 并不是很多，一般就是如下 <font color='red'><strong>3</strong></font> 类：</p><ul><li><font color='red'><strong>Internal Storage Bootloader</strong></font></li><li><font color='red'><strong>SPI Flash Storage Bootloader</strong></font></li><li><font color='red'><strong>UART XMODEM Bootloader</strong></font></li></ul><h1 id="二、Internal-Storage-Bootloader"><a href="#二、Internal-Storage-Bootloader" class="headerlink" title="二、Internal Storage Bootloader"></a>二、Internal Storage Bootloader</h1><p><font color='red'><strong>Internal Storage Bootloader</strong></font> 应该是所有版本的 BootLoader 中最普通的了，也是 EFR32 最常用的 BootLoader 之一。顾名思义，烧录了这个版本的 BootLoader 之后，一般情况下后续所有的 Application、OTA Image 等等，都是存储在芯片内部的 Flash里面的。</p><h1 id="三、SPI-Flash-Storage-Bootloader"><a href="#三、SPI-Flash-Storage-Bootloader" class="headerlink" title="三、SPI Flash Storage Bootloader"></a>三、SPI Flash Storage Bootloader</h1><p><font color='red'><strong>SPI Flash Storage Bootloader</strong></font> 一般是在芯片内部 Flash 不够用、需要扩展 Flash 的情况下使用的。烧录这个版本的 BootLoader，可以支持扩展一些 Silicon Labs 官方指定型号的 SPI 接口的 Flash。具体支持哪些型号的 Flash，可以参考官方文档<strong>《UG489: Silicon Labs Gecko Bootloader User’s Guide for GSDK 4.0 and Higher》</strong>中的支持型号列表，如下图所示：</p><p><img src="flash.png"></p><h1 id="四、UART-XMODEM-Bootloader"><a href="#四、UART-XMODEM-Bootloader" class="headerlink" title="四、UART XMODEM Bootloader"></a>四、UART XMODEM Bootloader</h1><p><font color='red'><strong>UART XMODEM Bootloader</strong></font> 和其他版本相比，除了都有程序启动引导功能，最大的特点在于一旦烧录了这个版本的 BootLoader，后面的 Application 固件，就可以通过串口进行下载。其他版本的 BootLoader 在下载之后，后续的 Application 固件的下载还是必须使用 J-Link 下载器才可以实现。串口固件升级协议就是按标准的 <font color='red'><strong>Xmodem-CRC16</strong></font> 协议，其信息包格式如下图所示：</p><p><img src="frame.png"></p><p><font color='red'><strong>Xmodem-CRC16</strong></font> 协议的传输流程如下图所示：</p><p><img src="flow.png"></p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-01：BootLoader+Application的开发模式</title>
      <link href="/zigbee-3.0-2-3-1/"/>
      <url>/zigbee-3.0-2-3-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p>基于 Silicon Labs 的 EFR32 芯片的开发，主要由两部分组成：<font color='red'><strong>BootLoader</strong></font> + <font color='red'><strong>Application</strong></font>。这两者翻译过来的中文分别叫做：<font color='red'><strong>系统启动前引导程序</strong></font> 和 <font color='red'><strong>应用程序</strong></font>。关于这两个通用概念更深入的概念性、原理性的介绍网上非常多，感兴趣的话可以自行去搜索查阅，这里就不再赘述了。</p><p>对于一颗处于出厂状态的 EFR32 芯片，一般都必须先烧录 <font color='red'><strong>BootLoader</strong></font>，再烧录 <font color='red'><strong>Application</strong></font>。两者都齐全了，芯片才能正常运行起来，达到开发者的使用目的。关于基于 EFR32 的 <font color='red'><strong>BootLoader</strong></font> + <font color='red'><strong>Application</strong></font> 的开发模式，更具体的细节，请阅读如下更深入细致的文章：</p><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-3-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-02：不同BootLoader之间的区别/如何选择</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-03：模板工程创建/编译/下载-BootLoader</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-04：模板工程创建/编译/下载-Application</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-05：如何导入已有的工程</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-6/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-06：不同格式固件的区别：bin/hex/s37/gbl</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-7/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-07：烧录固件之J-Link驱动安装</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-8/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-08：烧录固件之J-Link+Simplicity Commander</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-9/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-09：烧录固件之J-Link+J-Flash Lite</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-10/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-10：烧录固件之串口Xmodem BootLoader</a></li></ul><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-05：开发板到手测试</title>
      <link href="/zigbee-3.0-2-2-5/"/>
      <url>/zigbee-3.0-2-2-5/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h1><p>从2022年5月份开始，我们所有的开发板（见本文最上方）出厂都会默认烧录 <font color='red'><strong>Xmodem BootLoader</strong></font>，以及相应的<font color='red'><strong>测试固件</strong></font>。这样，用户拿到开发板后，就可以直接自行测试开发板上各部分硬件是否正常。</p><h1 id="二、串口测试"><a href="#二、串口测试" class="headerlink" title="二、串口测试"></a>二、串口测试</h1><p>开发板上将芯片的两路串口引出并通过串口转USB芯片转换成了USB接口，用户拿到开发板后，可以使用附赠的USB线把开发板连接到电脑上。</p><p>这里以开发板右上角的串口为例。完成硬件连接之后，用户在电脑端使用任意一种<font color='red'><strong>串口调试助手</strong></font>均可进行测试。选择指定的 <font color='red'><strong>COM口</strong></font>，配置波特率为<font color='red'><strong>115200</strong></font>，再选择<font color='red'><strong>发送新行</strong></font>（0x0D 0x0A）后，即可打开串口。紧接着按一下开发板上红色的复位按键，可以看到开发板上相应那一路的串口数据指示灯有闪烁，并且串口调试助手界面会有相应的串口信息输出。如下图所示：</p><p><img src="init.png"></p><p><font color='red'><em>（注：看到串口有提示信息输出，就说明串口的发送功能是正常的。）</em></font></p><p>出厂固件使用这一路串口作为CLI指令交互的串口，用户可以使用标准的CLI指令和开发板之间进行交互，用户可以尝试输入如下几条指令体验一下：<br><font color='red'></p><ul><li>help</li><li>info</li><li>network id</li><li>…</li></ul></font><p>CLI示例如下图所示：</p><p><img src="cli.png"></p><p>更多CLI指令，大家可以前往<a href="https://docs.silabs.com/zigbee/latest/zigbee-af-api/cli">Silicon Labs官方指定网页</a>进行了解。</p><p><font color='red'><em>（注：看到串口对于输入的指令有相应有信息返回，就说明串口的接收功能也是正常的。）</em></font></p><h1 id="三、LED与按键测试"><a href="#三、LED与按键测试" class="headerlink" title="三、LED与按键测试"></a>三、LED与按键测试</h1><p>开发板上板载了两个<font color='red'><strong>LED</strong></font>（<font color='red'><strong>高电平有效</strong></font>），以及两个<font color='red'><strong>按键</strong></font>（<font color='red'><strong>高电平有效</strong></font>）。开发板出厂烧录的程序支持通过短按 <font color='red'><strong>KEY1</strong></font> 和 <font color='red'><strong>KEY2</strong></font> 分别实现对于 <font color='red'><strong>LED1</strong></font> 和 <font color='red'><strong>LED2</strong></font> 的亮灭操作。</p><p><font color='red'><em>（注：注意观察，每一次按键操作，都有相应的串口提示信息输出。）</em></font></p><p>这部分的功能测试非常简单，这里就不再赘述。</p><h1 id="四、OLED测试"><a href="#四、OLED测试" class="headerlink" title="四、OLED测试"></a>四、OLED测试</h1><p>开发板上左下角专门设计了一个 <font color='red'><strong>OLED显示屏</strong></font> 接口，并且开发板出厂烧录的程序支持显示示例的设备信息。开发板插上 <font color='red'><strong>OLED显示屏</strong></font> 模块并上电之后，显示效果如下图所示：</p><p><img src="OLED.jpg"></p><h1 id="五、扩展口测试"><a href="#五、扩展口测试" class="headerlink" title="五、扩展口测试"></a>五、扩展口测试</h1><p>开发板上左上角专门设计了一个 <font color='red'><strong>扩展口</strong></font>，支持连接多种扩展模块，比如 <font color='red'><strong>DHT11模块</strong></font>、<font color='red'><strong>Flash模块</strong></font>、<font color='red'><strong>WiFi模块</strong></font>、<font color='red'><strong>语音识别模块</strong></font> 等等。开发板出厂烧录的程序支持在该接口驱动 <font color='red'><strong>DHT11模块</strong></font>，并通过串口周期性输出温湿度数据。硬件示意图如下：</p><p><img src="DHT11.jpg"></p><p>开发板插上 <font color='red'><strong>DHT11模块</strong></font> 并上电之后，按一下开发板上的复位按键，串口显示效果如下图所示：</p><p><img src="DHT11-com.png"></p><h1 id="六、进入Xmodem-BootLoader测试"><a href="#六、进入Xmodem-BootLoader测试" class="headerlink" title="六、进入Xmodem BootLoader测试"></a>六、进入Xmodem BootLoader测试</h1><p>从2022年5月份开始，我们所有的开发板（见本文最上方）出厂都会默认烧录 <font color='red'><strong>Xmodem BootLoader</strong></font>。大家可以尝试测试一下进入 <font color='red'><strong>Xmodem BootLoader</strong></font>。成功进入 <font color='red'><strong>Xmodem BootLoader</strong></font> 后的上位机软件界面如下图所示：</p><p><img src="bootloader.png"></p><p>具体操作步骤详见<a href="http://localhost:4000/zigbee-3.0-2-3-10/">《ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-10：烧录固件之串口Xmodem BootLoader》</a> 一文中的 <font color='red'><strong>3.4.2 进入固件传输模式</strong></font>，这里就不再重复了。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-06：不同格式固件的区别：bin/hex/s37/gbl</title>
      <link href="/zigbee-3.0-2-3-6/"/>
      <url>/zigbee-3.0-2-3-6/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、编译生成"><a href="#一、编译生成" class="headerlink" title="一、编译生成"></a>一、编译生成</h1><p>我们在使用 <font color='red'><strong>Simplicity Studio</strong></font> 开发基于 <font color='red'><strong>EFR32</strong></font> 的 <font color='red'><strong>EmberZnet</strong></font> 时，发现当我们的固件编译结束之后，在工程根目录下的 <font color='red'><strong>GNU ARM v10.2.1 - Default</strong></font> 目录下可以得到很多种格式的固件，比如 <font color='red'><strong>.bin</strong></font>、<font color='red'><strong>.hex</strong></font>、<font color='red'><strong>.s37</strong></font>、<font color='red'><strong>.gbl</strong></font> 等等。</p><p>那么这些不同格式的文件到底有什么区别的？在什么情况下我们要用到对应的文件呢？</p><h1 id="二、bin文件"><a href="#二、bin文件" class="headerlink" title="二、bin文件"></a>二、bin文件</h1><p><font color='red'><strong>.bin</strong></font> 文件是一个二进制镜像，它包含了一个字节一个字节的二进制镜像，可以烧录到任意地址中。我们在烧录时需要指定地址，所以我们一般不使用这个格式的文件。</p><h1 id="三、hex文件"><a href="#三、hex文件" class="headerlink" title="三、hex文件"></a>三、hex文件</h1><p><font color='red'><strong>.hex</strong></font> 文件是标准的<a href="http://en.wikipedia.org/wiki/Intel_HEX">Intel HEX格式</a>。这种 <font color='red'><strong>ASCII</strong></font> 文本文件包含在目标设备的什么位置编程哪些数据的记录，它可以包含<font color='red'><strong>应用程序固件</strong></font>、<font color='red'><strong>引导加载程序固件</strong></font>，甚至<font color='red'><strong>制造商 token</strong></font>和<font color='red'><strong>SimEEPROM token数据的编程数据</strong></font>。这是你将芯片的内容导出成文件时使用的格式。在 Silicon Labs 的开发中，<font color='red'><strong>.hex</strong></font> 文件通常被作为一种方式来提供一个单独的固件，该文件包含所有必要的信息（应用程序固件和任何必要的引导加载程序固件），用于一次加载一个芯片。这些类似于二进制文件，但它们也包含了 <font color='red'><strong>flash的地址</strong></font>。在实际量产过程中，我们可以将 <font color='red'><strong>bootloader</strong></font> 和 <font color='red'><strong>application</strong></font>合成一个 <font color='red'><strong>.hex</strong></font> 文件进行烧录。</p><h1 id="四、s37文件"><a href="#四、s37文件" class="headerlink" title="四、s37文件"></a>四、s37文件</h1><p><font color='red'><strong>.s37</strong></font> 文件是标准的<a href="http://en.wikipedia.org/wiki/S_record">摩托罗拉S-Record格式</a>。这种<font color='red'><strong>ASCII</strong></font> 文件包含有关已构建固件（无论是应用程序固件还是 bootloader固件）的编程数据和加载程序工具的一些原始数据。在 Silicon Labs 的开发中，一个 <font color='red'><strong>.s37</strong></font> 文件通常只代表一个固件（一个引导加载程序或一个应用程序，但不是两个同时包含）。它们类似于二进制 <font color='red'><strong>.bin</strong></font> 文件，但它们也包含了 <font color='red'><strong>flash的地址</strong></font>。我们正常调试固件时可以直接烧录 <font color='red'><strong>.hex</strong></font> 或者 <font color='red'><strong>.s37</strong></font> 文件，唯一的区别是 <font color='red'><strong>.s37</strong></font> 仅能是 <font color='red'><strong>bootloader</strong></font> 或 <font color='red'><strong>application</strong></font>中的一个，无法合并成一个 <font color='red'><strong>.s37</strong></font> 文件。</p><h1 id="五、gbl文件"><a href="#五、gbl文件" class="headerlink" title="五、gbl文件"></a>五、gbl文件</h1><p><font color='red'><strong>.gbl</strong></font> 文件是 <font color='red'><strong>Gecko BootLoader</strong></font> 数据文件的一个二进制格式的文件。使用 <font color='red'><strong>Simplicity Commander</strong></font> 工具可以将 <font color='red'><strong>.s37</strong></font> 文件转换成 <font color='red'><strong>.gbl</strong></font> 文件。由于 <font color='red'><strong>.gbl</strong></font> 文件是给 <font color='red'><strong>Gecko BootLoader</strong></font> 用的，因此这个文件格式仅适用于<font color='red'><strong>应用程序固件</strong></font>，而不适用于<font color='red'><strong>bootloader固件</strong></font>。我们在进行<font color='red'><strong>串口固件升级</strong></font>或者<font color='red'><strong>生成 .ota 文件</strong></font>时需要使用的都是这个格式的文件。更多关于 <font color='red'><strong>.gbl</strong></font> 格式的文件的详细信息请参考 Silicon Labs 的官方说明文档《UG266: Silicon Labs Gecko Bootloader User’s Guide》和《Gecko Bootloader File Format》。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-05：如何导入已有的工程</title>
      <link href="/zigbee-3.0-2-3-5/"/>
      <url>/zigbee-3.0-2-3-5/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><h1 id="一、打开Simplicity-IDE"><a href="#一、打开Simplicity-IDE" class="headerlink" title="一、打开Simplicity IDE"></a>一、打开Simplicity IDE</h1><p>一般打开 <font color='red'><strong>Simplicity Studio</strong></font> 软件之后的界面是下面这样的：</p><p><img src="ide1.png"></p><p>该页面被称为 <font color='red'><strong>Launcher</strong></font> 页面，在 <font color='red'><strong>Launcher</strong></font> 页面的右上角，如果大家能直接看到有红框中 <font color='red'><strong>Simplicity IDE</strong></font> 这样的字样，直接点击即可；如果没有就点击红圈中的图标，弹窗如下图所示：</p><p><img src="ide2.png"></p><p>选中其中的 <font color='red'><strong>Simplicity IDE</strong></font> 之后，点击 <font color='red'><strong>Open</strong></font> 即可打开 <font color='red'><strong>Simplicity IDE</strong></font> 界面。如下图所示：</p><p><img src="ide3.png"></p><h1 id="二、导入已有工程"><a href="#二、导入已有工程" class="headerlink" title="二、导入已有工程"></a>二、导入已有工程</h1><p>在 <font color='red'><strong>Simplicity IDE</strong></font> 界面下，导入工程的方式不止一种，这里主要介绍最常用、最有效的一种工程导入方式。</p><p>在软件界面左上角找到并点击 <font color='red'><strong>File</strong></font>，界面如下图所示：</p><p><img src="ide4.png"></p><p>在下拉选型中选中并单击 <font color='red'><strong>Import</strong></font> 之后，弹窗如下图所示：</p><p><img src="browse.png"></p><p>点击图中的 <font color='red'><strong>Browse</strong></font>，在接下来的弹窗中定位到需要导入的工程的根目录下，如下图所示：</p><p><img src="choose.png"></p><p>点击 <font color='red'><strong>选择文件夹</strong></font>，界面如下图所示：</p><p><img src="type.png"></p><p>选中图中 <font color='red'><strong>Project Type</strong></font> 为 <font color='red'><strong>Simplicity Studio (.sls)</strong></font> 的一行，然后点击 <font color='red'><strong>Next</strong></font>，界面如下图所示：</p><p><img src="next.png"></p><p>继续 <font color='red'><strong>Next</strong></font>：</p><p><img src="copy.png"></p><p>从上图中可以看到，我们希望导入的工程的名称被自动加上了一个后缀，这里是 <font color='red'><strong>_2</strong></font>。这里我们需要把这个后缀删除，删除后缀之后界面就变成了下面这样：</p><p><img src="finish.png"></p><p>图中也提示：<font color='red'><strong>Importing from existing project location</strong></font>。 最后点击 <font color='red'><strong>Finish</strong></font>。弹窗自动关闭，回到了 <font color='red'><strong>Simplicity IDE</strong></font> 的界面，如下图所示：</p><p><img src="ok.png"></p><p>至此，工程导入就完成了。</p><p>我们可以点击工程名称前的 <font color='red'><strong>&gt;</strong></font>，原本折叠的工程就展开了，我们就可以看到工程下完整的内容，如下图所示：</p><p><img src="expand.png"></p><p>接下来大家就可以按照自己的需求进行进一步的开发、编译等工作了。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-09：烧录固件之串口Xmodem BootLoader</title>
      <link href="/zigbee-3.0-2-3-9/"/>
      <url>/zigbee-3.0-2-3-9/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><font color='red'><em>（注：实现本文内容，不需要J-Link等任何下载器，所以也不涉及SWD下载口，只需串口转USB即可。）</em></font></p><h1 id="一、硬件准备"><a href="#一、硬件准备" class="headerlink" title="一、硬件准备"></a>一、硬件准备</h1><p>只要把开发板内 <font color='red'><strong>Xmodem BootLoader</strong></font> 所用的串口转成USB连接到电脑上，硬件连接就算是完成了。</p><p><font color='red'><em>（注：请确保芯片内已预先烧录了 <font color='red'><strong>Xmodem BootLoader</strong>。</font>）</em></font></p><p><strong>从本文发布之日起，我们所有的开发板（见本文最上方）出厂都会默认烧录 <font color='red'>Xmodem BootLoader</font>，并板载了串口转USB电路。如下图所示：</strong></p><p><img src="NZSA.png"></p><p>按上图框出部分提示，本文所用开发板内的 <font color='red'><strong>Xmodem BootLoader</strong></font> 使用的串口引脚为 <font color='red'><strong>PD0-发送 / PD1-接收</strong></font>。此外，辅助进入 BootLoader 的按键为板上的 <font color='red'><strong>KEY1（PC2，低电平有效）</strong></font>。</p><p><strong>所以，如果用的是我们的开发板，<font color='red'>只需要用一根USB线，一头连接上图红框中的USB口，另一头连接电脑上就可以了</font>！</strong></p><h1 id="二、软件准备"><a href="#二、软件准备" class="headerlink" title="二、软件准备"></a>二、软件准备</h1><p><font color='red'><em>（注：本文假设大家都已经安装好了相应的串口转USB的驱动，这里就不再细述。）</em></font></p><p>本文介绍的固件烧录方式使用的上位机软件是 <font color='red'><strong>ECOM</strong></font>，该软件是由 <font color='red'><strong>我爱IC导航网工作室</strong></font> 制作的。该软件是免安装的，大家可以直接去文初或文末提及的技术交流群的群文件中 <font color='red'><strong>ZigBee（Silicon Labs EFR32）全套资料</strong></font> 分组下去下载。如下图所示：</p><p><img src="qq_ecom.png"></p><p>下载后直接解压到电脑上任意位置，双击运行该软件后，界面如下图所示：</p><p><img src="ecom.png"></p><p>这样，软件准备就算是完成了。</p><h1 id="三、烧录固件"><a href="#三、烧录固件" class="headerlink" title="三、烧录固件"></a>三、烧录固件</h1><p>前面几篇介绍固件烧录的文章中提及到，需要烧录的固件一般会有 <font color='red'><strong>BootLoader</strong></font> 和 <font color='red'><strong>Application</strong></font> 这两种。但是，本文假定大家所用的开发板已预先烧录了 <font color='red'><strong>Xmodem BootLoader</strong></font>。所以，本文介绍的这种固件烧录方式，只适用于烧录 <font color='red'><strong>Application</strong></font> 固件。当然，这也是基于 <font color='red'><strong>Xmodem BootLoader</strong></font> 再烧录固件的意义所在。</p><h2 id="3-1-获取固件"><a href="#3-1-获取固件" class="headerlink" title="3.1 获取固件"></a>3.1 获取固件</h2><p>首先需要根据自己芯片的具体型号，生成或获取对应的固件。在文初或文末提及的技术交流QQ群中已经为大家准备好了几款常用 EFR32 芯片的测试固件，直接下载下来就能烧录使用。具体是群文件中 <font color='red'><strong>ZigBee（Silicon Labs EFR32）全套资料</strong></font> 分组下的 <font color='red'><strong>efr32mg21_efr32mg22_template_v1.0.zip</strong></font> 文件。如下图所示：</p><p><img src="qq_gbl.png"></p><p>下载下来之后解压到电脑上任意位置即可。在解压出来的文件夹中，可以看到有常用的几款 EFR32 芯片各自对应的可串口升级的测试固件。如下图所示：</p><p><img src="template.png"></p><p>按照自己所使用的芯片的型号，选择对应的 <font color='red'><strong>.gbl</strong></font> 文件。</p><p><font color='red'><em>（注：有 <strong>J-Link V9</strong> 的用户可以任意选择 <strong>.gbl</strong> 文件或同名的 <strong>.s37</strong> 文件进行烧录， <strong>.s37</strong> 文件不能用于串口烧录）。</em></font></p><h2 id="3-2-串口设置"><a href="#3-2-串口设置" class="headerlink" title="3.2 串口设置"></a>3.2 串口设置</h2><p>在打开的 <font color='red'><strong>ECOM</strong></font> 软件界面中选择指定的 <font color='red'><strong>串口号</strong></font> 并打开。本文使用的开发板内的 <font color='red'><strong>Xmodem BootLoader</strong></font> 使用的 <font color='red'><strong>波特率</strong></font> 为 <font color='red'><strong>115200</strong></font>，所以这里的软件界面中也必须选择相应的波特率。串口配置完成的软件界面如下图所示：</p><p><img src="ecom_ok.png"></p><h2 id="3-3-发送控制"><a href="#3-3-发送控制" class="headerlink" title="3.3 发送控制"></a>3.3 发送控制</h2><p>点击软件界面中的 <font color='red'><strong>传输协议</strong></font>，选择 <font color='red'><strong>Xmodem</strong></font>。然后点击 <font color='red'><strong>打开文件</strong></font>，按自己的需求选中需要烧录的 <font color='red'><strong>.gbl格式的固件</strong></font>。这里需要注意的是打开文件的时候， <font color='red'><strong>文件类型</strong></font> 必须选择为 <font color='red'><strong>所有文件</strong></font> 才能显示出 <font color='red'><strong>.gbl</strong></font> 文件。如下图所示：</p><p><img src="file_type.png"></p><p>发送控制配置完成的软件界面如下图所示：</p><p><img src="xmodem_send.png"></p><h2 id="3-4-烧录固件"><a href="#3-4-烧录固件" class="headerlink" title="3.4 烧录固件"></a>3.4 烧录固件</h2><h3 id="3-4-1-进入-BootLoader"><a href="#3-4-1-进入-BootLoader" class="headerlink" title="3.4.1 进入 BootLoader"></a>3.4.1 进入 BootLoader</h3><p>进入 BootLoader 之前，我们先按一下开发板上的复位按键，看一下芯片里当前运行的程序的启动信息输出是怎么样的，按完复位键之后，软件界面如下图所示：</p><p><img src="reset.png"></p><p>本文使用的开发板内的 <font color='red'><strong>Xmodem BootLoader</strong></font> 是通过板上的 <font color='red'><strong>KEY1</strong></font> 按键辅助进入 BootLoader 的。</p><p>具体操作步骤为：按住黄色的 <font color='red'><strong>KEY1</strong></font> 按键并保持住，再短按一下板上红色的 <font color='red'><strong>RST</strong></font> 按键。此时，可以看到 <font color='red'><strong>ECOM</strong></font> 软件的接收窗口打印出了许多提示信息，如下图所示：</p><p><img src="bootloader.png"></p><p>这样就表示已经成功进入 BootLoader 了。</p><p><font color='red'><em>（注：串口提示信息有时候可能会出现乱码的情况，应该是 SDK 本身的 bug，不影响使用，可以忽略。）</em></font></p><h3 id="3-4-2-进入固件传输模式"><a href="#3-4-2-进入固件传输模式" class="headerlink" title="3.4.2 进入固件传输模式"></a>3.4.2 进入固件传输模式</h3><p>为了便于用户理解，这里的串口提示信息我是专门修改过的。根据串口提示信息，大家就能知道了，接下来只需要输入字符 <font color='red'><strong>1</strong></font> 就可以直接进入 <font color='red'><strong>固件传输模式</strong></font>。</p><p><font color='red'><em>（注：<strong>ECOM</strong> 软件直接直接在接收窗口输入，大家直接把光标定位到接收窗口最后面的位置，即可输入信息。）</em></font></p><p>输入字符 <font color='red'><strong>1</strong></font> 之后，大家会看到接收窗口开始不断输出字符 <font color='red'><strong>C</strong></font>，如下图所示：</p><p><img src="begin.png"></p><p>这就表示 <font color='red'><strong>EFR32</strong></font> 芯片已经成功进入 <font color='red'><strong>固件传输模式</strong></font> 了，正在等待接收固件。</p><p><font color='red'><em>（注：这里使用的 <strong>Xmodem BootLoader</strong> 内部程序要求：一旦进入固件传输模式，上位机必须在 <strong>60</strong> 秒内向 EFR32 芯片发送正确的 <strong>.gbl</strong> 格式的固件。如果超时没有收到符合要求的固件，<strong>Xmodem BootLoader</strong> 会自动退出固件传输模式。）</em></font></p><h3 id="3-4-3-开始传输固件"><a href="#3-4-3-开始传输固件" class="headerlink" title="3.4.3 开始传输固件"></a>3.4.3 开始传输固件</h3><p>在前序步骤都完成之后，直接点击 <font color='red'><strong>ECOM</strong></font> 软件界面上的 <font color='red'><strong>发送文件</strong></font>，固件就正式开始传输了，如下图所示：</p><p><img src="progress.png"></p><p>从上图中可以看到，我们选中的固件，正在以非常快的速度通过串口发送给 <font color='red'><strong>EFR32</strong></font> 芯片。</p><p><font color='red'><em>（注：我们的开发板出厂默认的 <strong>Xmodem BootLoader</strong> 使用的波特率为 <strong>115200</strong> bps，使用该串口速率完成一次固件传输所需时间大概在 <strong>60</strong> 秒左右。如果嫌速度慢，可以私信要求出厂换成波特率为 <strong>921600</strong> bps 的 <strong>Xmodem BootLoader</strong>，一次固件传输的时间可以缩短到 <strong>35</strong> 秒左右）</em></font></p><h3 id="3-4-4-固件传输完成"><a href="#3-4-4-固件传输完成" class="headerlink" title="3.4.4 固件传输完成"></a>3.4.4 固件传输完成</h3><p>固件传输完成后，<font color='red'><strong>ECOM</strong></font> 软件会弹出如下图所示的弹窗：</p><p><img src="ok.png"></p><p>点击 <font color='red'><strong>确定</strong></font> 关闭弹窗。<font color='red'><strong>ECOM</strong></font> 软件界面如下图所示：</p><p><img src="application.png"></p><p>从最新的 <font color='red'><strong>ECOM</strong></font> 软件界面可以看出，固件传输完成后，<font color='red'><strong>Application</strong></font> 固件自动启动了。</p><p><font color='red'><em>（注：如果使用的是官方原版的 <strong>Xmodem BootLoader</strong>，固件传输完成后是不会自动运行 <strong>Application</strong> 固件的，需要复位之后才会运行。）</em></font></p><p>至此，使用 <font color='red'><strong>Xmodem BootLoader</strong></font> 进行串口固件烧录就算是完成了。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-08：烧录固件之J-Link+Simplicity Commander</title>
      <link href="/zigbee-3.0-2-3-8/"/>
      <url>/zigbee-3.0-2-3-8/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><font color='red'><em>（注：本文假设大家的电脑上都已经安装好了 J-Link 的驱动。如果还没有安装好，请查阅本教程相关技术章节。）</em></font></p><h1 id="一、硬件准备"><a href="#一、硬件准备" class="headerlink" title="一、硬件准备"></a>一、硬件准备</h1><ul><li><p><strong>开发板</strong>：首先需要准备好需要烧录固件的开发板，确定好下载口的位置，一般需要找到并确认 3V3（VCC）、DIO、CLK、GND 这4个引脚。</p></li><li><p><strong>下载器</strong>：其次准备好用来烧录固件的下载工具，这里以 J-Link V9 为例来说明。也是需要在J-Link的接口上找到并确认 3V3（VCC）、DIO、CLK、GND 这4个引脚。</p></li></ul><p>然后将开发板与下载器之间的这4个引脚同名相连，硬件连接就算是完成了。</p><h1 id="二、软件准备"><a href="#二、软件准备" class="headerlink" title="二、软件准备"></a>二、软件准备</h1><p>到文初或文末的技术交流群的群文件中找到 <font color='red'><strong>ZigBee（Silicon Labs EFR32）全套资料</strong></font> 这个分组，下载该分组下的 <font color='red'><strong>simplicity_commander_1v12p2b1085.zip</strong></font> 文件。如下图所示：</p><p><img src="commander1.png"></p><p>下载完成后解压到电脑上任意位置即可，如下图所示：</p><p><img src="commander2.png"></p><p>这样，软件准备就算是完成了。</p><h1 id="三、确认连接"><a href="#三、确认连接" class="headerlink" title="三、确认连接"></a>三、确认连接</h1><p>打开解压出来的软件的文件夹，找到文件夹（simplicity_commander_1v12p2b1085）根目录下的 <font color='red'><strong>commander.exe</strong></font> 文件，双击即可打开运行该软件。如下图所示：</p><p><img src="select.png"></p><p>点击软件界面右上角的 <font color='red'><strong>Select Kit…</strong></font>，在弹出的下拉选项中单击选中下载器的序列号，即可选中相应的下载器。如下图所示：</p><p><img src="sn.png"></p><p>选中之后的软件界面变为如下图所示：</p><p><img src="chosen.png"></p><p>此时单击软件界面左侧的 <font color='red'><strong>Device Info</strong></font>，可以看到软件界面会变化成如下图所示：</p><p><img src="chip.png"></p><p>从上图中我们可以清晰地看出所连开发板上的芯片的详细信息，包括芯片的IEEE地址、Flash大小、RAM大小等等。</p><p><font color='red'>如果能够顺利地进行到这一步，那说明所有的硬件设备都是没问题的，并且每一个环节的连接也都是正常的。</font></p><h1 id="四、烧录固件"><a href="#四、烧录固件" class="headerlink" title="四、烧录固件"></a>四、烧录固件</h1><p>固件可能不止一种，比如会有 BootLoader 固件、Application 固件等等。当然，任何一个固件的烧录，在确保硬件连接正常后，烧录方式其实都是完全一样的。下面以 BootLoader 固件的烧录为例进行介绍。</p><h2 id="4-1-获取固件"><a href="#4-1-获取固件" class="headerlink" title="4.1 获取固件"></a>4.1 获取固件</h2><p>首先需要根据自己芯片的具体型号，生成或获取对应的 BootLoader 固件。在文初或文末提及的技术交流QQ群中已经生成好相应的 BootLoader 固件，直接下载下来就能烧录使用。具体是群文件中 <font color='red'><strong>ZigBee（Silicon Labs EFR32）全套资料</strong></font> 分组下的 <font color='red'><strong>efr32mg21_efr32mg22_bootloader_internal_single_v1.0.zip</strong></font> 文件。如下图所示：</p><p><img src="bootloader1.png"></p><p>下载下来之后解压到电脑上任意位置即可。解压出来的文件夹中就含有常用几款 EFR32 芯片各自对应 BootLoader 固件。如下图所示：</p><p><img src="bootloader2.png"></p><h2 id="4-2-选中固件"><a href="#4-2-选中固件" class="headerlink" title="4.2 选中固件"></a>4.2 选中固件</h2><p>点击软件界面左侧 <font color='red'><strong>Flash</strong></font>，进入新的界面，如下图所示：</p><p><img src="flash-browse.png"></p><p>通过点击上图中的 <font color='red'><strong>Browse</strong></font> 进去选中需要烧录的固件之后，软件界面如下图所示：</p><p><img src="flash.png"></p><h2 id="4-3-烧录固件"><a href="#4-3-烧录固件" class="headerlink" title="4.3 烧录固件"></a>4.3 烧录固件</h2><p>最后点击上图中的 <font color='red'><strong>Flash</strong></font>，即可完成固件的烧录。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-07：烧录固件之J-Link驱动安装</title>
      <link href="/zigbee-3.0-2-3-7/"/>
      <url>/zigbee-3.0-2-3-7/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、下载驱动"><a href="#一、下载驱动" class="headerlink" title="一、下载驱动"></a>一、下载驱动</h1><h2 id="1-1-群文件下载"><a href="#1-1-群文件下载" class="headerlink" title="1.1 群文件下载"></a>1.1 群文件下载</h2><p>大家可以直接去文初或文末的技术交流群的群文件中找到 <font color='red'><strong>ZigBee（Silicon Labs EFR32）全套资料</strong></font> 这个分组，找到 <font color='red'><strong>JLink_Windows_V764c_x86_64.zip</strong></font> 文件。如下图所示：</p><p><img src="qq_jlink.png"></p><p>可以直接下载获取。</p><h2 id="1-2-官方下载"><a href="#1-2-官方下载" class="headerlink" title="1.2 官方下载"></a>1.2 官方下载</h2><p>大家也可以百度搜索 <font color='red'><strong>J-Link</strong></font> 去找，或者直接进 J-Link 的官网（<a href="https://www.segger.com/downloads/jlink/">https://www.segger.com/downloads/jlink/</a> ），就可以找到：</p><p><img src="jlink.png"></p><p>选择点击合适的版本，网页会弹出如下图所示的窗口：</p><p><img src="jlink2.png"></p><p>点击 <font color='red'><strong>Download</strong></font>，进入下一个界面：</p><p><img src="jlink3.png"></p><p>勾选 <font color='red'><strong>I accept these Terms of Use</strong></font>，点击 <font color='red'><strong>Download software</strong></font> 即可开始下载。</p><h1 id="二、安装驱动"><a href="#二、安装驱动" class="headerlink" title="二、安装驱动"></a>二、安装驱动</h1><p>获取到的 J-Link 的驱动软件的安装包，如下图所示：</p><p><img src="jlink_exe.png"></p><p>双击运行该可执行文件，弹窗如下图所示：</p><p><img src="jlink_install.png"></p><p>接下来，可以什么都不用改，直接一路默认安装直到完成即可。</p><h1 id="三、测试驱动"><a href="#三、测试驱动" class="headerlink" title="三、测试驱动"></a>三、测试驱动</h1><p>在电脑 Windows 的搜索栏里搜索并打开 <font color='red'><strong>设备管理器</strong></font>，找到 <font color='red'><strong>通用串行总线控制器</strong></font>，点击展开。如下图所示：</p><p><img src="device_manager1.png"></p><p>将 J-Link 下载器插到电脑任意一个 USB 口上，观察 <font color='red'><strong>通用串行总线控制器</strong></font> 下的列表。如果列表中新增了一个名为 <font color='red'><strong>J-Link driver</strong></font> 的项目，如下图所示：</p><p><img src="device_manager2.png"></p><p>则说明 J-Link 的驱动安装成功了，后面可以正常使用了。</p><h1 id="补充、J-Link-驱动版本选择"><a href="#补充、J-Link-驱动版本选择" class="headerlink" title="补充、J-Link 驱动版本选择"></a>补充、J-Link 驱动版本选择</h1><p>本教程推荐安装使用不低于 <font color='red'><strong>V7.6.2</strong></font> 的 J-Link 驱动。下图是官方发布的 <font color='red'><strong>J-Link V7.6.2</strong></font> 的更新说明：</p><p><img src="jlink_release_note.png"></p><p>从上图中可以看出，J-Link 是从 <font color='red'><strong>V7.6.2</strong></font> 开始才增加了对 <font color='red'><strong>EFR32MG24</strong></font> 芯片的支持。所以，为了本教程可以适用于更多的处理器，比如 <font color='red'><strong>EFR32MG21</strong></font>、<font color='red'><strong>EFR32MG22</strong></font>、<font color='red'><strong>EFR32MG24</strong></font> 等等，本教程推荐安装使用不低于 <font color='red'><strong>V7.6.2</strong></font> 的 J-Link 驱动。</p><p><font color='red'><em>（注：如果还有遇到问题，建议在文初或文末提及的技术交流QQ群中提问交流。）</em></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matter实战教程-Silicon Labs EFR32-1-01：目录</title>
      <link href="/matter-1-1/"/>
      <url>/matter-1-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><ul><li><a href="https://oceanwang.top/matter-1-1/">Matter实战教程-Silicon Labs EFR32-1-01：目录</a></li></ul><h1 id="二、其他"><a href="#二、其他" class="headerlink" title="二、其他"></a>二、其他</h1><p>示例内容。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> matter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
            <tag> Matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拿破仑940911-全站导航</title>
      <link href="/navigation/"/>
      <url>/navigation/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、Matter"><a href="#一、Matter" class="headerlink" title="一、Matter"></a>一、Matter</h1><ul><li><font size=4.5><a href="https://oceanwang.top/matter-1-1/">Matter实战教程（Silicon Labs EFR32）</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：待定）</strong></font></li></ul><h1 id="二、ZigBee"><a href="#二、ZigBee" class="headerlink" title="二、ZigBee"></a>二、ZigBee</h1><ul><li><font size=4><a href="https://oceanwang.top/zigbee-3.0-2-1-1/">ZigBee实战教程（Silicon Labs EFR32）</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li><li><font size=4><a href="https://oceanwang.top/zigbee-3.0-3-1-1/">ZigBee实战教程（TI CC2530）</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li></ul><h1 id="三、MATLAB"><a href="#三、MATLAB" class="headerlink" title="三、MATLAB"></a>三、MATLAB</h1><ul><li><font size=4><a href="https://oceanwang.top/matlab-1-1/">MATLAB入门教程</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li><li><font size=4><a href="https://oceanwang.top/matlab-2-1/">MATLAB进阶教程</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li></ul><h1 id="四、搭建个人博客网站"><a href="#四、搭建个人博客网站" class="headerlink" title="四、搭建个人博客网站"></a>四、搭建个人博客网站</h1><ul><li><font size=4><a href="https://oceanwang.top/personal-website-1/">搭建个人博客网站教程</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li></ul><h1 id="五、信息与通信工程"><a href="#五、信息与通信工程" class="headerlink" title="五、信息与通信工程"></a>五、信息与通信工程</h1><ul><li><font size=4><a href="https://oceanwang.top/info-and-comm-engi-1/">信息与通信工程教程</a><font color='red'>（&lt;-点击链接）</font><strong>（作者：拿破仑940911）</strong></font></li></ul><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> navigation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-TI CC2530+Z-Stack-2-02：搭建开发环境</title>
      <link href="/zigbee-3.0-3-2-2/"/>
      <url>/zigbee-3.0-3-2-2/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h1><p>示例内容。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><p>示例内容。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-TI CC2530+Z-Stack-2-01：资源包详解</title>
      <link href="/zigbee-3.0-3-2-1/"/>
      <url>/zigbee-3.0-3-2-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h1><p>示例内容。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><p>示例内容。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-TI CC2530+Z-Stack-1-01：目录</title>
      <link href="/zigbee-3.0-3-1-1/"/>
      <url>/zigbee-3.0-3-1-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-1-1-1/">ZigBee 3.0理论教程-通用-1-01：概述</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-2/">ZigBee 3.0理论教程-通用-1-02：协议架构</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-3/">ZigBee 3.0理论教程-通用-1-03：协调器Coordinator+路由器Router+终端设备End Device</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-4/">ZigBee 3.0理论教程-通用-1-04：ZCL规范与Cluster</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-5/">ZigBee 3.0理论教程-通用-1-05：安全加密</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-6/">ZigBee 3.0理论教程-通用-1-06：建网与组网</a></li></ul><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-3-2-1/">ZigBee 3.0实战教程-TI CC2530+Z-Stack-2-01：资源包详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-3-2-2/">ZigBee 3.0实战教程-TI CC2530+Z-Stack-2-02：搭建开发环境</a><font color='red'>（更新中）</font></li></ul><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-04：如何选择开发板下载器抓包工具</title>
      <link href="/zigbee-3.0-2-2-4/"/>
      <url>/zigbee-3.0-2-2-4/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h1><p>示例内容。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><p>示例内容。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-03：开发环境测试</title>
      <link href="/zigbee-3.0-2-2-3/"/>
      <url>/zigbee-3.0-2-2-3/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、新建测试工程"><a href="#一、新建测试工程" class="headerlink" title="一、新建测试工程"></a>一、新建测试工程</h1><p>启动运行Simplicity Studio之后，在软件界面最上面的菜单栏中依次找到并点击 File -&gt; New -&gt; Silion Labs Project Wizard，可以看到如下 Target, SDK, and Toolchain Selection 的界面：</p><p><img src="new.png"></p><p>由上图可见，Simplicty Studio在创建工程时给出了默认的硬件和SDK的选择，这里我们是为了测试整套开发环境是否搭建成功，所以无所谓这边的硬件选的是哪种，只要确保SDK部分选择的是我们自己添加的Gecko SDK即可。</p><p>这里我们直接点击 NEXT 进入下一步 Example Project Selection 的界面：</p><p><img src="light.png"></p><p>也有可能是下面这样的界面：</p><p><img src="light2.png"></p><p>在筛选框中输入 light，在筛选结果中选择 Z3Light，点击 NEXT 进入下一步 Project Configuration 的界面：</p><p><img src="finish.png"></p><p>这里我们什么都不用改，直接点击 FINISH 即可。</p><p>至此，测试工程就创建完成了。</p><p><font color='red'><em>（注：最新版本的Simplicity Studio不再需要手动Generate了，而是会根据用户的修改实时自动生成代码！）</em></font></p><h1 id="二、编译测试工程"><a href="#二、编译测试工程" class="headerlink" title="二、编译测试工程"></a>二、编译测试工程</h1><p>工程创建完成之后，软件界面如下图所示：</p><p><img src="ide.png"></p><p>参考上图，先选中我们新建的工程，然后再点击界面上部的“小锤子”图标，就开始编译工程了。</p><p>编译过程中，软件界面如下图所示：</p><p><img src="building.png"></p><p>编译结束之后，我这里最后显示的编译结果如下图所示：</p><p><img src="ok.png"></p><p>如果最后显示的是 0 errors（这里的warning忽略不管），则说明前面搭建的整套软件开发环境是没问题的了！</p><p>如果报错了，则建议删除原有的所有资源文件夹，重新进行安装。如果还是不能解决，建议在文初或文末提及的技术交流QQ群中提问交流。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-02：开发环境搭建</title>
      <link href="/zigbee-3.0-2-2-2/"/>
      <url>/zigbee-3.0-2-2-2/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、解压所有资源包"><a href="#一、解压所有资源包" class="headerlink" title="一、解压所有资源包"></a>一、解压所有资源包</h1><p>关于所有资源包的获取和详情介绍，请参阅<a href="https://oceanwang.top/zigbee-3.0-4-1/">《ZigBee 3.0教程-4-01：实战：Silicon Labs EFR32+EmberZnet：资源包详解》</a>。</p><p>请确保已获得下图所示的所有资源包。</p><p><img src="all_zip.png"></p><p>在电脑上任意位置，新建一个任意由英文、数字和下划线组成的名称（注意不要带空格）的文件夹，这里我选择在我电脑D盘的根目录下创建一个名为silabs的文件夹；</p><p>将前面获取到的所有资源包的压缩文件，全部选中并直接解压到刚刚新建的文件夹中，如下图所示：</p><p><img src="all_folder.png"></p><h1 id="二、初次启动IDE"><a href="#二、初次启动IDE" class="headerlink" title="二、初次启动IDE"></a>二、初次启动IDE</h1><p>找到\silabs\simplicity_studio_v5.3.2.0目录下的studio.exe文件：</p><p><img src="studio.png"></p><p><font color='red'><em>（注：以后的开发会经常需要用到Simplicity Studio，所以建议给studio.exe生成一个快捷方式发送到桌面，使用会方便很多。）</em></font></p><p>双击即可打开Simplicity Studio软件，如下图所示：</p><p><font color='red'><em>（注：Simplicity Studio这个软件稍微有点大，启动需要一点时间。建议启动过程中不要去点击软件页面中任意位置，以免软件启动失败，等待软件启动成功后，再进行后续操作。）</em></font></p><p><img src="studio_start.png"></p><p>首次启动Simplicity Studio可能会弹出下图这样的界面：</p><p><img src="license.png"></p><p>勾选“Accept all agreements”，再点击“Done”即可。</p><p>软件启动成功的后界面如下图所示：</p><p><img src="welcome.png"></p><h1 id="三、配置SDK"><a href="#三、配置SDK" class="headerlink" title="三、配置SDK"></a>三、配置SDK</h1><p>Simplicity Studio软件初次启动成功后，需要把Gecko SDK添加到Simplicity Studio中去才可以进行实际的开发工作。</p><p>在软件界面最上面的菜单栏中找到并点击 Windows，在下拉选型中找到并点击 Preference，可以看到如下界面：</p><p><img src="preference.png"></p><p>在上图所示界面左侧依次找到并点击 Simplicity Studio -&gt; SDKs，如下图所示：</p><p><img src="add_sdk.png"></p><p>可见当前 Simplicity Studio 里面暂时还没有任何可用的SDK。</p><p>按上图提示点击 Add SDK：</p><p><img src="gecko_sdk.png"></p><p>按上图提示定位到前面解压出来的sdk的目录，最后点击“选择文件夹”。</p><p>接着弹出如下界面：</p><p><img src="gecko_sdk_ok.png"></p><p>由此可见，添加的SDK已经被成功识别了，进一步点击 OK，弹出下一界面：</p><p><img src="trust.png"></p><p>点击 “Trust”，弹出下一界面：</p><p><img src="gecko_sdk_apply.png"></p><p>由此可见，我们刚刚添加的SDK已经被完全识别出来了，并且可以看到该SDK中包含的各个子SDK的信息，其中就包含了本教程最重要的ZigBee的SDK——EmberZnet 7.0.2.0！</p><p>最后点击“Apply and Close”。至此，开发所需的所有资源就全部齐全了！</p><h1 id="四、设置工作空间"><a href="#四、设置工作空间" class="headerlink" title="四、设置工作空间"></a>四、设置工作空间</h1><p>因为这边是将我做教程用的Simplicity Studio整个打包出来的，并且该软件记录的是workspace的绝对路径（D:\silabs\workspace），所以该软件给大家自动生成的workspace就是在 D:\silabs 路径下：</p><p><img src="workspace.png"></p><p><font color='red'><em>（注：其实在大家第一次打开Simplicity Studio软件的时候，该软件就自动生成了这个workspace目录了。）</em></font></p><p>如果前面大家也跟我一样将所有的资源包都解压到 D:\silabs 路径下的话，那看到的结果应该和我上图给出来的是一致的。</p><p>如果大家是将所有资源包解压到其他的目录，比如 E:\ABC，那建议大家：<br>（1）将workspace切换到和资源包相同的根目录下，也就是 E:\ABC；<br>（2）手动删除软件初次启动时自动生成的D:\silabs\workspace目录。</p><p>更改Simplicity Studio的workspace的操作比较简单。</p><p>在软件界面最上面的菜单栏中找到并点击 File，在下拉选型中找到并点击 Switch Workspace，可以看到如下界面：</p><p><img src="switch_workspace.png"></p><p>点击 Browse 之后，选中打算做为新的 workspace 的目标路径之后，点击 Launch 即可。软件会自动重启一遍，新的workspace就生效了。</p><p>这样一来，原来的workspace就失效了，直接手动删除即可。</p><font size=5><font color='red'>注：如果更改了workspace，则需要按<strong>“三、配置SDK”</strong>重新配置一遍SDK！</font></font><p>&nbsp;</p><p><strong>至此，完整的开发环境就已经搭建完成了！</strong></p><p><strong>没错，就是这么简单！</strong></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-01：资源包详解</title>
      <link href="/zigbee-3.0-2-2-1/"/>
      <url>/zigbee-3.0-2-2-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、获取资源包"><a href="#一、获取资源包" class="headerlink" title="一、获取资源包"></a>一、获取资源包</h1><p>本教程使用的全部资源包，都以QQ群文件的形式提供下载。大家可以根据本文文初或文末的提示加群<font color='red'><strong>（拿破仑ZigBee：263671349）</strong></font>，即可直接免费下载获取。</p><p><img src="all_zip.png"></p><p><font color='red'><em>（更多丰富的示例工程代码、软硬件资料，也都会在群文件该目录下持续更新，欢迎大家关注。）</em></font></p><ul><li><strong>documentation_v4.0.2.0.zip</strong>：内含完整版的Gecko SDK v4.0.2.0相关的<font color='red'><strong>所有官方文档资料</strong></font>，解压出来就可以直接查阅；</li><li><strong>gecko_sdk_v4.0.2.0.zip</strong>：内含完整版的<font color='red'><strong>Gecko SDK v4.0.2.0（含EmberZnet 7.0.2.0）</strong></font>的源码，<font color='red'><strong>免安装</strong></font>，解压出来直接就可以正常使用；</li><li><strong>simplicity_commander_1v12p2b1085</strong>：内含完整版的<font color='red'><strong>Simplicity Commander 1v12p2b1085</strong></font>，<font color='red'><strong>免安装</strong></font>，主要用做烧录固件等用，解压出来直接就可以正常使用；</li><li><strong>simplicity_studio_v5.3.2.0.zip</strong>：内含完整版的<font color='red'><strong>Simplicity Studio v5.3.2.0</strong></font>和<font color='red'><strong>GNU v10.2.2020.q4</strong></font>，<font color='red'><strong>免安装</strong></font>，解压出来直接就可以正常使用。</li></ul><h1 id="二、资源包说明"><a href="#二、资源包说明" class="headerlink" title="二、资源包说明"></a>二、资源包说明</h1><p>资源包中的documentation和simplicity_commander这两部分都是比较常规的，这里就不做详细描述了，下面着重介绍一下simplicity_studio和gecko_sdk两部分。</p><h2 id="2-1-Simplicity-Studio"><a href="#2-1-Simplicity-Studio" class="headerlink" title="2.1 Simplicity Studio"></a>2.1 Simplicity Studio</h2><p>Silicon Labs的Simplicity Studio是一个集成开发环境，大家熟知的主要有v4和v5两个版本。</p><p><img src="v4.png"></p><p>v4版本相对老一些，之前Silicon Labs官方还在官网同时维持着v4版本和v5版本的下载链接，以及两个版本的差异对比等等，现在官方已经彻底删除v4相关的下载和说明了，仅保留了v5版本，并对齐进行了非常完善的全方位支持。所以，现在很多新的开发工程师大多都已经不知道v4版本的存在了。</p><p><img src="v5.png"></p><p>后面官方推出的新版的SDK也仅支持最新的Simplicity Studio v5了。比如，你想使用最新的SDK，你就必须使用最新的Simplicity Studio，才能对最新的SDK进行开发。</p><p>新的SDK修复了老版SDK的很多bug，也增加了很多优化和新的内容。我们必须跟着技术发展走，所以这里也建议还在使用v4版本Simplicity Studio的老工程师们尽快升级到最新的v5版本上来。</p><p><font color='red'><em>（注：最新版本的Simplicity Studio不再需要手动Generate了，而是会根据用户的修改实时自动生成代码！）</em></font></p><h2 id="2-2-Gecko-SDK"><a href="#2-2-Gecko-SDK" class="headerlink" title="2.2 Gecko SDK"></a>2.2 Gecko SDK</h2><p>Silicon Labs为开发者全方位提供了多种SDK，比如有：</p><ul><li><strong>8051 SDK</strong>：主要面向8位处理开发使用；</li><li><strong>Gecko SDK</strong>：主要面向32位处理器开发使用；</li><li>等等。</li></ul><p>本教程主要是针对ZigBee无线协议的开发，所基于的硬件主要是Silicon Labs的EFR32MG21、EFR32MG22、EFR32MG24系列的无线MCU，这些MCU都是ARM Cortex-M33内核的32位处理器，所以自然是需要基于Gecko SDK进行开发的。</p><p>Gecko SDK本身其实是一个大的“SDK包”，里面包含了许多“子SDK”。就以本教程所基于的 4.0.2.0 版本的 Gecko SDK 为例，其中所包含的“子SDK”如下图所示：</p><p><img src="gecko_sdk.png"></p><p>从图中可以看出，我们常用的Bluetooth、Bluetooth Mesh、Z-Wave、ZigBee等协议相关的SDK都是包含在内的。</p><p>Silicon Labs的Gecko SDK也经历了好几个版本的更新迭代：</p><ul><li><strong>在Gecko SDK 4.0.0.0之前</strong>，所有的SDK的开发，主要是通过<font color='red'><strong>“基于Application Framework的AppBuilder方式”</strong></font>进行，示例界面如下图所示：</li></ul><p><img src="appbuilder.png"></p><ul><li><strong>从Gecko SDK 4.0.0.0开始往后</strong>，所有的SDK开发，变成了通过<font color='red'><strong>“基于Component的Project Configurator方式”</strong></font>进行，示例界面如下图所示：</li></ul><p><img src="project_configurator.png"></p><h2 id="2-4-EmberZnet"><a href="#2-4-EmberZnet" class="headerlink" title="2.4 EmberZnet"></a>2.4 EmberZnet</h2><p>前面提到，本教程主要是针对ZigBee无线协议的开发，所以这里有必要专门说明一下Gecko SDK“SDK包”中的ZigBee“子SDK”——EmberZnet。</p><p>本教程所使用的 Gecko SDK 4.0.2.0，其中包含的ZigBee SDK是 EmberZnet 7.0.2.0。 </p><p>大家从<a href="https://www.silabs.com/developers/zigbee-emberznet">官网</a>可以获取到关于 EmberZnet 极其详细的介绍。下图是 EmberZnet 7.0.2.0 版本的更新信息，以及最近的一些历史版本：</p><p><img src="emberznet.png"></p><p>从中可以看出，Silicon Labs官方对于自家的SDK（比如EmberZnet）更新得相当频繁。从上图（截止至本文的发布时间）可以看出，Silicon Labs的ZigBee协议栈——EmberZnet几乎是每1~2个月就会发布一个新的版本。</p><p>在新发布的SDK中，既有老版本SDK中bug的修复，也会有许多优化、新内容的增加等等。这里举例跟大家说明一下为什么推荐使用新版本的SDK，主要从各个版本仍存在的<strong>Known Issues in the Current Release</strong>（取自于各个版本EmberZnet的release note）的数量来说明：</p><ul><li>EmberZnet 6.10.3.0：约占<strong>4.5</strong>页篇幅；</li><li>EmberZnet 7.0.0.0：约占<strong>4.5</strong>页篇幅；</li><li>EmberZnet 7.0.1.0：约占<strong>3</strong>页篇幅；</li><li>EmberZnet 7.0.2.0：约占<strong>2.5</strong>页篇幅；</li></ul><p>由此可见，目前最新的7.0.2.0版的EmberZnet是目前可用的版本中<strong>Known Issues</strong>最少的版本，这个还是非常有吸引力的！</p><p>比如直到7.0.0.0版本的EmberZnet发布都一直长期存在的<strong>“Known Issue 488977和702802”</strong>，终于在7.0.1.0 版本的EmberZnet中得到了修复。（感兴趣的朋友，可以去查阅EmberZnet 7.0.0.0和7.0.1.0的release note去查看详情。）</p><h1 id="三、离线开发模式"><a href="#三、离线开发模式" class="headerlink" title="三、离线开发模式"></a>三、离线开发模式</h1><p>一般来说，指定版本的SDK一般只能用指定版本的IDE才能进行开发。要使用新版的SDK，前提一般都是必须先把升级IDE。</p><p>虽然IDE和SDK都推荐用最新版本的，但是频繁更新开发使用的IDE和SDK往往会给开发人员带来很多的麻烦。</p><p>比如，等我们把IDE升级了，新的SDK也下载下来了，结果：</p><ul><li>可能，基于旧版SDK开发的工程，原本编译没问题，现在编译却开始报一大堆奇奇怪怪的错，明明升级之前都是编译成功了的呀？！明明只是升级，前提啥都没动呀？！</li><li>可能，想把基于老版SDK开发的工程移植到新版的SDK上，但也是会产生各种报错和警告，过程很艰难，折腾很久之后也不一定能完全解决；</li><li>可能，IDE和SDK的风格都变了，跟之前的开发风格完全不一样了，想退也退不回旧版本了。</li></ul><p>大家在开发过程中，具体遇到的由于版本混乱导致的问题可能还有很多。</p><p>这里，经过安装、测试、卸载、再安装、再测试等等一系列的实验验证后，终于总结出来一套针对于Silicon Labs的IDE和SDK全新的开发模式——<font color='red'><strong>离线开发模式</strong></font>。主要体现在前面提到的资源包的中这2个：</p><ul><li><strong>simplicity_studio_v5.3.2.0.zip</strong>：内含完整版的<font color='red'><strong>Simplicity Studio v5.3.2.0</strong></font>和<font color='red'><strong>GNU v10.2.2020.q4</strong></font>，<font color='red'><strong>免安装</strong></font>，解压出来直接就可以正常使用；</li><li><strong>gecko_sdk_v4.0.2.0.zip</strong>：内含完整版的<font color='red'><strong>Gecko SDK v4.0.2.0（含EmberZnet 7.0.2.0）</strong></font>的源码，<font color='red'><strong>免安装</strong></font>，解压出来直接就可以正常使用。</li></ul><p>资源包可用解压到电脑上任意位置，免安装就可以直接开发使用。</p><p><font color='red'><em>（注：资源包中Simplicity Studio软件的自动更新功能已关闭，不用担心IDE和SDK被意外或强制更新可能带来的问题。）</em></font></p><p>等Simplicity Studio和Gecko SDK迭代了几个版本，有了重大更新之后，我会重新制作新版本的资源包上传至群文件。到时候需要的朋友可以自行下载使用。</p><p><font color='red'><strong>由于是使用离线资源包的形式，而不是exe可执行文件安装或是在线获取，所以新旧版的IDE或SDK都是可以完全共存使用，互不影响的！</strong></font></p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-1-01：目录</title>
      <link href="/zigbee-3.0-2-1-1/"/>
      <url>/zigbee-3.0-2-1-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-1-1-1/">ZigBee 3.0理论教程-通用-1-01：概述</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-2/">ZigBee 3.0理论教程-通用-1-02：协议架构</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-3/">ZigBee 3.0理论教程-通用-1-03：协调器Coordinator+路由器Router+终端设备End Device</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-4/">ZigBee 3.0理论教程-通用-1-04：ZCL规范与Cluster</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-5/">ZigBee 3.0理论教程-通用-1-05：安全加密</a></li><li><a href="https://oceanwang.top/zigbee-3.0-1-1-6/">ZigBee 3.0理论教程-通用-1-06：建网与组网</a></li></ul><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-2-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-01：资源包详解</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-2-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-02：开发环境搭建</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-2-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-03：开发环境测试</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-2-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-04：如何选择开发板/下载器/抓包工具</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-2-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-05：开发板到手测试</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-2-6/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-2-06：5分钟快速体验：组网+无线点灯</a><font color='red'>（更新中）</font></li></ul><h1 id="三、工程创建-编译-下载"><a href="#三、工程创建-编译-下载" class="headerlink" title="三、工程创建/编译/下载"></a>三、工程创建/编译/下载</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-3-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-01：BootLoader+Application的开发模式</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-02：不同BootLoader之间的区别/如何选择</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-03：模板工程创建/编译/下载-BootLoader</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-04：模板工程创建/编译/下载-Application</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-05：如何导入已有的工程</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-6/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-06：不同格式固件的区别：bin/hex/s37/gbl</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-7/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-07：烧录固件之J-Link驱动安装</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-8/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-08：烧录固件之J-Link+Simplicity Commander</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-3-9/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-3-09：烧录固件之串口Xmodem BootLoader</a></li></ul><h1 id="四、片上资源应用"><a href="#四、片上资源应用" class="headerlink" title="四、片上资源应用"></a>四、片上资源应用</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-4-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-01：片上资源详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-02：串口资源详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-03：串口发送数据-hello world</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-04：串口接收数据-原样返回</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-05：IO口资源详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-6/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-06：IO口作输出-LED灯/蜂鸣器/继电器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-7/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-07：IO口作输入-按键/火焰传感器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-8/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-08：定时器资源详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-9/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-09：定时器-输出PWM调光/直流电机调速</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-10/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-10：定时器-输出PWM控制舵机</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-11/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-11：ADC资源详解</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-12/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-12：ADC测电压/电流/电量</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-13/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-13：单总线接口的DS18B20温度传感器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-14/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-14：单总线接口的DHT11温湿度传感器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-15/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-15：IIC/I2C接口的SHT20温湿度传感器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-16/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-16：IIC/I2C接口的0.96寸OLED液晶显示屏</a></li><li><a href="https://oceanwang.top/zigbee-3.0-2-4-17/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-4-17：SPI接口的W25Q80/32/64/128 Flash</a><font color='red'>（更新中）</font></li></ul><h1 id="五、无线组网与通信"><a href="#五、无线组网与通信" class="headerlink" title="五、无线组网与通信"></a>五、无线组网与通信</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-5-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-01：创建网络与加入网络</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-5-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-02：PANID/信道/网络地址等参数获取</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-5-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-03：无线数据发送与接收</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-5-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-04：串口数据透传</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-5-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-05：按键/串口无线点灯</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-5-6/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-5-06：修改与测量发射功率</a><font color='red'>（更新中）</font></li></ul><h1 id="六、完整项目-HA-On-Off-Light"><a href="#六、完整项目-HA-On-Off-Light" class="headerlink" title="六、完整项目-HA On/Off Light"></a>六、完整项目-HA On/Off Light</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-6-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-6-01：示例项目概述</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-6-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-6-02：示例项目On/Off Server</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-6-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-6-03：示例项目On/Off Client</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-6-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-6-04：示例项目完整演示</a><font color='red'>（更新中）</font></li></ul><h1 id="七、低功耗"><a href="#七、低功耗" class="headerlink" title="七、低功耗"></a>七、低功耗</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-7-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-7-01：基于MG21的4.5uA电流的低功耗实验</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-7-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-7-02：基于MG22的1.4uA电流的低功耗实验</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-7-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-7-03：示例项目On/Off Client低功耗版本</a><font color='red'>（更新中）</font></li></ul><h1 id="八、无线固件升级OTA"><a href="#八、无线固件升级OTA" class="headerlink" title="八、无线固件升级OTA"></a>八、无线固件升级OTA</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-8-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-8-01：无线固件升级OTA Server</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-8-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-8-02：无线固件升级OTA Client</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-8-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-8-03：无线固件升级OTA完整过程</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-8-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-8-04：无线固件升级OTA Image存储位置</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-8-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-8-05：用EFR32给普通STM32单片机OTA升级固件</a><font color='red'>（更新中）</font></li></ul><h1 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h1><ul><li><a href="https://oceanwang.top/zigbee-3.0-2-9-1/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-9-01：使用token访问NVM非易失性存储器</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-9-2/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-9-02：使用Ubiqua+CC2531 USB dongle抓包</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-9-3/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-9-03：使用Git/GitHub/GitLab管理代码</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-9-4/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-9-04：大规模组网实验</a><font color='red'>（更新中）</font></li><li><a href="https://oceanwang.top/zigbee-3.0-2-9-5/">ZigBee 3.0实战教程-Silicon Labs EFR32+EmberZnet-9-05：维护在线设备列表</a><font color='red'>（更新中）</font></li></ul><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-06：建网与组网</title>
      <link href="/zigbee-3.0-1-1-6/"/>
      <url>/zigbee-3.0-1-1-6/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、创建网络"><a href="#一、创建网络" class="headerlink" title="一、创建网络"></a>一、创建网络</h1><p>首先，由协调器创建一个网络，您必须准备4个参数：</p><ul><li>PAN ID</li><li>扩展 PAN ID</li><li>工作频道</li><li>发射功率</li></ul><p>您需要指定这四个参数。如果您不这样做，协调器将随机选择一个PAN ID和一个扩展的PAN ID。如果您未指定频道，则协调器将扫描并选择一个相对安静的频道进行工作。</p><h1 id="二、加入网络"><a href="#二、加入网络" class="headerlink" title="二、加入网络"></a>二、加入网络</h1><h2 id="2-1-使用Well-Known-Link-Key加入"><a href="#2-1-使用Well-Known-Link-Key加入" class="headerlink" title="2.1 使用Well-Known Link Key加入"></a>2.1 使用Well-Known Link Key加入</h2><p><img src="Joining-with-Well-Known-Link-Key.png"></p><p>网络创建后，新设备可以开始加入。</p><ol><li>新设备将开始查找可连接的网络。在此阶段，新设备不知道可加入的网络处于哪个信道，所以它将通过扫描的方式来发现可加入的网络。它将在每个信道上都发送Beacon Request，等待一会儿如果没有回应的话，就跳到下一个信道继续发Beacon Request。</li><li>路由器和协调器将使用Beacon中携带的网络信息来响应Beacon Request。这些信息包括PAN ID，扩展PAN ID以及路由器或协调器的其他一些属性，例如设备是否允许连接，设备是否具有允许新设备连接的能力。</li><li>新设备可以从不同设备接收多个Beacon。它将选择信号质量最好的一个，并开始发送Association Request。在该Association Request中，将PAN ID设置为所选的PAN，并将目标节点ID设置为所选设备的节点ID。在这个报文里面，将会携带这个新设备的设备类型等信息。</li><li>当路由器或协调器收到此Association Request时，它将为新设备选择一个节点ID，并以Association Response进行响应。然后，新设备获得了其Node ID，但由于未获得Network Key而无法与其他节点通信。</li><li>协调器会将当前的Network Key传输到新设备。<strong>该传输消息在应用程序层中使用Well-Known Link Key加密</strong>。</li><li>当新设备收到此消息时，<strong>它将使用Well-Known Link Key对消息解密并获取Network Key</strong>。之后，该设备实际上已加入网络，并能够与网络中的所有其他节点通信。</li><li>设备将发送一条Device Announce，以通知网络的其他节点，以通知他们我已加入。</li></ol><h2 id="2-2-使用Install-Code-Derived-Link-Key加入"><a href="#2-2-使用Install-Code-Derived-Link-Key加入" class="headerlink" title="2.2 使用Install Code Derived Link Key加入"></a>2.2 使用Install Code Derived Link Key加入</h2><p><img src="Joining-with-Install-Code.png"></p><ol><li>在出厂之前，应该已经将Install Code烧录到新设备里面了。</li><li>在加入之前，用户需要获取新设备的Install Code和Eui64，然后在协调器上对其进行配置。</li><li>然后，协调器从Install Code中获取Link Key，并将协调器设置为使用此Link Key来加密此新设备的传输Network Key消息。</li><li><strong>当协调器开始将Network Key传输到新设备时，它将对消息使用Install Code Derived Link Key进行加密并将其传输到新设备</strong>。</li><li>当新设备收到此消息时，<strong>它将从闪存中读取Install Code并计算得出应和协调器端相同的Link Key，然后使用此密钥对消息进行解密并获取Network Key。</strong></li></ol><p>其余过程类似于使用Well-Known Link Key进行组网的过程。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-05：安全加密</title>
      <link href="/zigbee-3.0-1-1-5/"/>
      <url>/zigbee-3.0-1-1-5/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、安全威胁"><a href="#一、安全威胁" class="headerlink" title="一、安全威胁"></a>一、安全威胁</h1><p>由于ZigBee是一种无线技术，因此安全性非常重要，因为黑客可以通过无线检测到这些数据包。想象您有一个智能门锁。如果黑客捕获了打开您的门的数据包，那么他可以重发该文件以打开您的门。这是很危险的。</p><p><img src="Security-Threats.png"></p><p>在ZigBee的网络里面，面临的两种最为典型的安全威胁：</p><ul><li>第一种是伪造。比如黑客捕获到无线报文，进行篡改之后，伪造一个假的报文，再发送到这个ZigBee网络中，从而去控制网络里的设备；</li><li>第二种是重播。捕获到这个报文后，不进行编辑，直接重新播放一下，</li></ul><p>为了防止这种情况发生，ZigBee定义了许多安全功能。下面将会做简要介绍。</p><h1 id="二、ZigBee安全"><a href="#二、ZigBee安全" class="headerlink" title="二、ZigBee安全"></a>二、ZigBee安全</h1><h2 id="2-1-加密流程"><a href="#2-1-加密流程" class="headerlink" title="2.1 加密流程"></a>2.1 加密流程</h2><p>APS层和网络层的加密流程，如下图所示：  </p><p><img src="APS-NWK-Security-0.png"></p><p>它显示了如何在网络层中保护不安全的网络帧：首先，网络有效负载将被加密。之后，将在加密的有效负载之前添加安全标头。然后根据网络标头，安全标头和加密的有效负载来计算哈希值。最后，将32位哈希值附加到帧的末尾。如果更改了网络标头，安全标头和加密的有效负载中的任何字节，则哈希值将不同。我们将此值称为MIC（mandatory integrity control），是消息完整性检查的缩写。</p><h2 id="2-2-加密算法"><a href="#2-2-加密算法" class="headerlink" title="2.2 加密算法"></a>2.2 加密算法</h2><p><img src="APS-NWK-Security-1.png"></p><p>APS层和网络层的两个加密环节使用的都是AES128对称加密算法，这意味着需要使用相同的密钥进行加密和解密。</p><h2 id="2-3-完整性检查"><a href="#2-3-完整性检查" class="headerlink" title="2.3 完整性检查"></a>2.3 完整性检查</h2><p><img src="APS-NWK-Security-2.png"></p><h2 id="2-4-重播攻击保护"><a href="#2-4-重播攻击保护" class="headerlink" title="2.4 重播攻击保护"></a>2.4 重播攻击保护</h2><p><img src="APS-NWK-Security-3.png"></p><p>添加了帧计数器以防止重发攻击。让我们看看它是如何工作的。</p><p><img src="Frame-Counter.png"></p><p>在发送方</p><ul><li>每发送一次Frame Counter的值都需要增加1；</li><li>Frame Counter的值需要保存在non-volatile memory中，便于重启后恢复Frame Counter。</li></ul><p>在接收方</p><ul><li>首先，将记录接收到帧的节点的Eui64和Frame Counter的值；</li><li>来自同一节点的下一条消息的Frame Counter必须大于记录的Frame Counter值。如果此次的Frame Counter比上一次的小或者相等，该消息都将被视为重发并将被丢弃；</li><li>由于资源有限，接收方只保存所有邻居的Frame Counter。</li></ul><p>由于Frame Counter是一个32位值，因此如果设备长时间保持运行状态，它可能会自动溢出。显然，如果帧计数器被覆盖，可能会出现问题。为防止这种情况发生，必须在溢出之前更新Network Key。如果更新了Network Key，帧计数器则可以再次从零开始。</p><p>对于End Device来说，它通常只需要保存其父节点的Frame Counter即可。</p><h1 id="三、APS层安全"><a href="#三、APS层安全" class="headerlink" title="三、APS层安全"></a>三、APS层安全</h1><h2 id="3-1-总览"><a href="#3-1-总览" class="headerlink" title="3.1 总览"></a>3.1 总览</h2><p>在APS层用来加密的密钥被称为Link key。在ZigBee网络中，虽然APS层和网络层都有加密，但是绝大部分通信都只是在网络层的加密。<br>一般来说，只有在传输Network Key的时候需要在应用层被加密，并且这仅在Trust Center和新设备之间发生。因此，在这种情况下，我们也将其称为Trust Center Link key。</p><p>新设备和Trust Center之间必须要在组网之前就使用哪一个Link Key达成共识，所以新设备和Trust Center之间是不需要一个Link Key的传输过程的。</p><p>网络中的设备可以使用相同的Link key或不同的Link key，只要新设备和Trust Center之间达成共识即可。</p><p>一般来说有四种Link Key，但是我们以前两种为主。后两种目前可能用得很少了，这里仅作简要描述，不做深入探讨。</p><h2 id="3-2-四种类型的Link-Key"><a href="#3-2-四种类型的Link-Key" class="headerlink" title="3.2 四种类型的Link Key"></a>3.2 四种类型的Link Key</h2><h3 id="3-2-1-Default-Global-Trust-Center-Link-Key"><a href="#3-2-1-Default-Global-Trust-Center-Link-Key" class="headerlink" title="3.2.1 Default Global Trust Center Link Key"></a>3.2.1 Default Global Trust Center Link Key</h3><p>又被称为the well-known link key，其内容如下：</p><p>Default global Trust Center link key (0:15) = 0x5a 0x69 0x67 0x42 0x65 0x65 0x41 0x6c 0x6c 0x69 0x61 0x6e 0x63 0x65 0x30 0x39</p><p>其实就是字符串“ <strong>ZigBeeAlliance09</strong> ”。这个是在ZigBee 3.0之前就一直在广泛使用的一个相同的默认的密钥，如今得以保留主要是为了保持向后的兼容性。</p><p>所有的ZigBee设备都会有这个Default Global Trust Center Link Key。如果没有指定其他的link key的话，Default Global Trust Center Link Key就是设备在入网过程中第一个被尝试使用的密钥。</p><p>如果希望能保证和其他的ZigBee 3.0的设备之间互联互通的话，这个密钥时不能改变的。</p><h3 id="3-2-2-Install-Code-Derived-Preconfigured-Link-Key"><a href="#3-2-2-Install-Code-Derived-Preconfigured-Link-Key" class="headerlink" title="3.2.2 Install Code Derived Preconfigured Link Key"></a>3.2.2 Install Code Derived Preconfigured Link Key</h3><p><img src="Install-Code-to-Key.png"></p><p>Install Code并不是一个Key，而是一个Key的输入。Install Code是16字节多项式+ 2字节CRC，再通过固定的算法，计算可以得出Link Key。这种Link Key的传输是由人工来完成的，Install Code的实际应用场景如下图所示：</p><p><img src="Install-Code.png"></p><ul><li>首先，在产品生产的时候，由厂家在产线随机生成一个Install Code；</li><li>然后将这个Install Code烧录到产品里面；</li><li>然后把这个Install Code和Eui64打到标签上面，贴在这个产品表面；</li><li>在安装的时候，安装人员利用手持设备的扫描功能，从产品标签上扫描获取Install Code和Eui64；</li><li>将获取到的Install Code和Eui64告诉Trust Center（一般是协调器）；</li><li>然后在Trust Center上通过这个Install Code得到Link Ley，让Trust Center知道IEEE地址为Eui64的这个新设备必须使用这个Link Key进行组网；</li><li>待入网的新设备这边，从flash中读取出预先烧录的Install Code，然后使用相同的算法得出Link key。</li></ul><p>待入网的新设备这边计算得出的Link Key应与Trust Center端的派生Link Key相同。这样，即使消息已加密，他们也可以在应用程序层进行通信。接下来就开始组网的过程了。</p><p>An Install Code is a sequence of 16 bytes followed by 2 bytes of CRC. A complete 18 bytes sequence is needed to generate a unique TCLK. The usage of install codes defined in Z3.0 was added to allow a generalized out-of-band key delivery method for network commissioning. It works as follows:</p><ol><li>TC gets the install code and the 64-bit IEEE address of the device that will use this install code to join, via any user interface (serial, display and switches, etc.). The install code must be physically provided with the joining device.</li><li>TC validates the CRC of the install code introduced. If this is valid then a TCLK entry is added into the TC with the derived key and the address of the corresponding device.</li><li>The joining device is instructed to use its install code to generate the corresponding TCLK.</li><li>The network is open by any means.</li><li>The joining device performs association and the Trust Center delivers the network key encrypted in APS layer with the install code derived key.</li><li>After this, the joining device must perform the update of its TCLK as BDB specification requires.</li></ol><p>For further details on how to generate the install codes, see the Base Device Specification [7]. This is supported only by R21 or later revisions, so to allow backwards compatibility the application must have a way to attempt joining networks without the usage of Install Codes.</p><h3 id="3-2-3-Distributed-Security-Global-Link-Key"><a href="#3-2-3-Distributed-Security-Global-Link-Key" class="headerlink" title="3.2.3 Distributed Security Global Link Key"></a>3.2.3 Distributed Security Global Link Key</h3><p>在Distributed Security Network中，没有Trust Center，每个Router都可以分发 network key。</p><p>由Router父节点向新入网设备分发的network key，在APS层是使用Distributed Security Global Link Key进行加密的。</p><p>如果希望能保证和其他的ZigBee 3.0的设备之间互联互通的话，这个密钥时不能改变的。</p><p>Distributed Security Global Link Key (0:15) = 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf</p><h3 id="3-2-4-Touchlink-Preconfigured-Link-Key"><a href="#3-2-4-Touchlink-Preconfigured-Link-Key" class="headerlink" title="3.2.4 Touchlink Preconfigured Link Key"></a>3.2.4 Touchlink Preconfigured Link Key</h3><p>如果新设备是要通过touchlink的方式进行组网的话，就需要使用Touchlink Preconfigured Link Key。</p><p>Touchlink Preconfigured Link Key (0:15) = 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf</p><h1 id="四、网络层安全"><a href="#四、网络层安全" class="headerlink" title="四、网络层安全"></a>四、网络层安全</h1><h2 id="4-1-总览"><a href="#4-1-总览" class="headerlink" title="4.1 总览"></a>4.1 总览</h2><p>该密钥称为Network Key。由于它是一种对称加密算法，因此同一ZigBee网络中的所有设备都将使用相同的Network Key。</p><p>在网络安全标头中，添加了“帧计数器”的字段和加密信息节点的源Eui64，以防止重发攻击。还添加了密钥序列号以支持Network Key更新。</p><h2 id="4-2-逐跳安全"><a href="#4-2-逐跳安全" class="headerlink" title="4.2 逐跳安全"></a>4.2 逐跳安全</h2><p><img src="Hop-by-Hop-vs-End-to-End.png"></p><p>APS层的安全性，是<strong>端到端</strong>安全性。在APS层，是节点A加密好了之后一直得等到达目的地（节点C）之后才去解密。这中间的加密/解密密钥（Link Key）只要A和C两个知道，B不知道这个密钥，不能去进行加密解密，所以B不关心通信的内容。在这种情况下，我们可以有很多的Link Key，只要通信的双方知道即可。</p><p>网络层的安全性，是逐跳安全性。A加密好了在发给C的过程中要经过B，B收到这个报文后要先解密再加密，加密完了之后再发给下一跳。由于所有的中间节点都要参与解密和重新加密的过程，所以所有的节点都必须使用相同的Network Key。</p><p><img src="Hop-by-Hop-Security.png"></p><p>路由器节点需要解密该消息，然后对其进行加密，然后替换安全标头中的信息，再将其发送出去。如果解密失败，该消息将立即被丢弃。</p><p>这样的好处是可以尽快丢弃攻击消息。</p><h2 id="4-3-Network-Key"><a href="#4-3-Network-Key" class="headerlink" title="4.3 Network Key"></a>4.3 Network Key</h2><p>Network Key是一个16字节的八位位组。通常，它是在网络创建时由协调器随机生成的。当新设备加入网络时，它们必须获得Network Key的副本。</p><p>在ZigBee网络中，将Network Key分发给新设备的角色称为Trust Center。有两种典型的安全模型，即集中式安全网络和分布式安全网络。</p><p><img src="Security-Model.png"></p><p>在集中式安全网络中，只有一个Trust Center，通常是协调器。所有新设备将从协调器获取Network Key。<br>在分布式安全网络中，没有一个固定的Truster Center，也就是说每个路由器都是一个Trust Center。新设备可以从每个路由器父节点那里获取Network Key。</p><p>Distributed Security Model目前主要就是在飞利浦的Touch Link上在使用。ZigBee 3.0中最主要的还是Centralized Security Model的模式。</p><p>由于需要将Network Key从一个设备传输到另一台设备，因此在传输过程中需要对密钥值进行加密。此加密在应用程序层中完成。我们稍后再讨论。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-04：ZCL规范与Cluster</title>
      <link href="/zigbee-3.0-1-1-4/"/>
      <url>/zigbee-3.0-1-1-4/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、Clusters"><a href="#一、Clusters" class="headerlink" title="一、Clusters"></a>一、Clusters</h1><p>在每个Endpoint中，我们可以配置几个Clusters。ZigBee Cluster实际上是一种通信模型。</p><p><img src="Cluster.png"></p><p>它基于客户端/服务器模式，用于描述两个设备之间的应用协议。每个Cluster都有一个Cluster ID，该ID在ZigBee CLuster Library（ZCL）中定义。Cluster中可以定义多个属性和命令。</p><h1 id="二、举例"><a href="#二、举例" class="headerlink" title="二、举例"></a>二、举例</h1><p>让我们看一个Cluster的示例，以便我们可以更好地理解它。</p><p>例如，我们需要实现一个带有两个灯泡的灯。我们可以在其中定义两个Endpoint。每个Endpoint代表一个灯泡。</p><p><img src="OnOff-Cluster.png"></p><p>对于基本功能，例如打开/关闭，我们可以使用打开/关闭 Cluster。灯是服务器端，而开关是客户端。服务器端定义了一个属性“ on / off”，指示灯是打开还是关闭。还定义了诸如“打开”，“关闭”，“切换”之类的命令，这些命令应从客户端发送到服务器端。</p><p><img src="Level-Control-Cluster.png"></p><p>如果我们需要更多功能，例如我们需要支持亮度级别控制。我们可以使用亮度级别控制Cluster。在此Cluster中，服务器端定义了一个属性“Level”，指示灯泡的亮度。还定义了诸如“逐渐变化亮度级别”之类的命令，这些命令应从客户端发送到服务器端。</p><p><img src="Color-Control-Cluster.png"></p><p>而且，如果我们需要更多功能，例如需要支持颜色控制，则可以使用颜色控制Cluster。</p><p>对于ZCL规范中没有定义的一些功能，开发者可以添加一些自定义的Cluster，自己去定义属性、命令等，就成了一个私有的协议。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-03：协调器Coordinator/路由器Router/终端设备End Device</title>
      <link href="/zigbee-3.0-1-1-3/"/>
      <url>/zigbee-3.0-1-1-3/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h1><p>示例内容。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><p>示例内容。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-02：协议架构</title>
      <link href="/zigbee-3.0-1-1-2/"/>
      <url>/zigbee-3.0-1-1-2/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>下图阐述了协议体系结构。</p><p><img src="Protocol-Overview.png"></p><p>物理层和MAC层由IEEE-802.15.4定义。</p><ul><li>物理层，这部分功能通常是由芯片或者硬件来实现，负责无线电收发管理，包括诸如调制/解调，信号强度检测等功能；</li><li>MAC层，一部分是由硬件来实现，一部分是由软件来实现，负责数据收发，重传、扫描，单跳通信。</li></ul><p>网络层、APS子层和应用层这些功能，都是由ZigBee联盟来定义的。</p><ul><li>网络层，负责消息的路由，设备状态的维护，子节点管理等等；</li><li>应用程序支持层（APS），在网络层和应用层之间，负责端到端的重传和确认；</li><li>应用层，包括了一个ZDO（ZigBee设备管理对象（Endpoint 0），每个应用程序实例称为一个Endpoint）和用户应用（留给用户设计）；<br>另外，在APS层和网络层都有一些安全特性，包括数据的加密、校验等等，可用于保护网络免遭黑客攻击。</li></ul><p>整个协议栈中，除了用户应用以外，其余的部分都是由平台供应商来实现，用户只需要专注在应用层的开发即可。</p><h1 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h1><p>ZigBee在ISM频率上工作。通信信道定义如下：</p><p><img src="Physical-Layer.png"></p><p>ZigBee最常见的工作频率是2.4GHz。</p><h2 id="2-1-调制"><a href="#2-1-调制" class="headerlink" title="2.1 调制"></a>2.1 调制</h2><p>物理层还处理数据原始数据的发送和接收。PHY层在868/915 MHz频带中使用二进制相移键控（BPSK），并在2.4 GHz下使用偏移正交相移键控（O-QPSK）。信息通过直接序列扩频（DSSS）编码到载波上，DSSS是一种固有的鲁棒方法，可通过信号处理增益来提高多径性能和接收机灵敏度。请注意，2.4 GHz是全球ZigBee通信最常用的频段。唯一官方Sub GHz的支持是英国的Smart Energy。</p><h2 id="2-2-输出功率"><a href="#2-2-输出功率" class="headerlink" title="2.2 输出功率"></a>2.2 输出功率</h2><p>802.15.4是专为低功耗，低数据速率，低成本的网络设计的。这些通常称为PAN或个人局域网。它主要是为中小无线电范围的应用而设计，但是外接功率放大器也是可以的。在大多数国家中，允许获得大约+20 dBm的输出功率。在欧洲，最大发射功率被限制到+10 dBm左右。但是，这足以使您到达大约一到三公里的距离，这取决于您的链路预算，所使用的功率放大系数和/或所拥有的天线的类型。</p><h2 id="2-3-数据速率"><a href="#2-3-数据速率" class="headerlink" title="2.3 数据速率"></a>2.3 数据速率</h2><p>使用2.4 GHz直接序列扩频Phy或DSSS，原始比特率为250 kb / s。在实际应用中，通常只有理论速率的四分之一或五分之一。预期的吞吐率与56k波特调制解调器相当。单跳链路上每秒约52700 kb。放入多跳效果后，传播所需的时间会更长一些。</p><h2 id="2-4-开阔场地的传输距离"><a href="#2-4-开阔场地的传输距离" class="headerlink" title="2.4 开阔场地的传输距离"></a>2.4 开阔场地的传输距离</h2><p>对于2.4GHz的PHY，在视线可达的空间，传输距离大约可以达到2KM。这是在大部分地区的无线法规允许的范围内，经过放大发射功率来实现的。由于存在大量信道的缘故，你可以选择一个相对安静的信道来避免干扰，从而保证可靠的通信。如果你选择了一个嘈杂的信道，ZigBee的网络管理单元可以切换到一个新的信道，这就是被称为“frequency agility”的特性。工作在2.4GHz频段还有一个好处，因为这个频段在全球范围内都是可用的，这样可以让你的产品具有更广阔的应用空间。</p><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p>物理层的功能包括：</p><ul><li>物理无线和MAC层的接口</li><li>无线电开/关控制（ZigBee硬件的收发是不能同时进行的）</li><li>调制与解调</li><li>信道选择</li><li>链接质量估算，信号强度检测</li><li>能量检测，功率调节</li></ul><h2 id="2-6-补充"><a href="#2-6-补充" class="headerlink" title="2.6 补充"></a>2.6 补充</h2><p>ZigBee在2.4GHz的工作频率范围内，和2.4GHZ的WiFi的工作频率是有重叠的，WiFi的信道带宽通常是20MHz或者40MHz。</p><p><img src="ZigBee-Wifi-Co-Existence.png"></p><p>当WiFi和ZigBee在同一个空间内工作的时候，就可能会出现干扰。如何保证ZigBee和WiFi在狭小的空间内的共存，这对于ZigBee网关的设计会是一个极大的挑战。</p><h1 id="三、媒体访问控制（MAC）层"><a href="#三、媒体访问控制（MAC）层" class="headerlink" title="三、媒体访问控制（MAC）层"></a>三、媒体访问控制（MAC）层</h1><p>MAC层的主要功能是确保可靠的单跳消息传递。以下是有关这些功能的更多详细信息。</p><h2 id="3-1-CSMA-CA"><a href="#3-1-CSMA-CA" class="headerlink" title="3.1 CSMA-CA"></a>3.1 CSMA-CA</h2><p>在同一个空间内，如果多个无线节点同时发送信号，就会互相在空间中形成干扰，导致数据变形，CSMA-CA机制就是用于避免这种情况。简单来说就是一个listen before talk的机制，发之前先听一下。听的目的，就是判断一下当前这个信道上有没有别人在用这个信道。</p><ul><li>如果没有，那么我就发；</li><li>如果由，那么我就等一等，等到信道空闲了，我再发。</li></ul><p>假设有一个节点正在listen，他将根据接收到的信号的RSSI来做出判断</p><p>如果在当前环境里，我能接收到的信号强度小于一个门限，比如小于-75 dBm，我就认为这个信道上没有人在发送，那我就可以开始发送了， </p><p><img src="CSMA-CA-Send.png"></p><p>如果听到有一个节点正在发送，但是因为他发的信号强度比较小，那么我仍然检测不到他的信号。这个时候我能听到的信号强度还是小于这个门限的，所以我还是可以继续发送。因为两者之间隔得比较远，两个限号之间碰不到。</p><p><img src="CSMA-CA-Send-2.png"></p><p>假如有一个节点离我很近，他在发信号。我听的时候，我能够检测到他的信号强度大于这个门限，那这时候我就不能发送了。我就需要等一等，然后过一段时间我再来听一下，看看能不能发送了，</p><p><img src="CSMA-CA-Wait.png"></p><p>802.15.4允许多个网络位于同一通道上。因此，需要采取某种方式来避免来自不同网络的数据包在空中碰撞而造成通信错误。MAC子层使用CSMA-CA（Carrier Sense Multiple Access/Collision Avoidance）控制对无线电的访问。避免碰撞是通过CCA（Clear Channel Assessment）完成的。</p><ul><li>在发送之前，每个节点必须检查电波是否可以正常发送（RSSI低于CCA阈值）。</li><li>如果是（RSSI低于CCA阈值），则节点应继续进行并在进行少量随机退避后进行传输。</li><li>如果CCA没有通过（RSSI高于CCA阈值），则该节点应等待多个退避周期，然后才能再次尝试该过程。</li></ul><p>随机退避允许多个节点交错传输，因此它们总是可以在某个时间点找到干净的无线空间来作数据传输。尽管比特率很低，因为数据包比较小（128 bytes），即使在非常嘈杂的信道上每一个节点也可以成功地完成数据传输。</p><h2 id="3-2-确认"><a href="#3-2-确认" class="headerlink" title="3.2 确认"></a>3.2 确认</h2><p>MAC层还为节点提供了一种方法，该方法可通过确认得知节点已成功接收到1跳单播传输，并且已通过验证CRC保留了所传输消息的完整性。<br>多跳传输应在每个跳上进行确认。节点执行CCA检查并发送消息后，它会等待MAC确认。如果未收到消息，则该节点应尝试多次重发该消息，直到其最终成功或最大的重试次数已用尽。</p><p><img src="MAC-APS-Ack.gif"></p><p>MAC层的每一帧都是需要确认的，实际上是在中间的每一跳都要去做这样的确认的。比如网络中的节点A，需要给节点D发送一个报文，这个通信通常是在应用层进行的，也就是A的应用层要发一个包到D的应用层，因为A和D隔得比较远，中间需要经过几个中间节点，这种情况下数据报文的传输过程：</p><ul><li>首先，应用层发一个包交给网络层，然后交给MAC层，最后通过物理层发出去。</li><li>中间节点B收到之后，会立马发一个MAC层的Ack表示已经收到了</li><li>节点B的网络层收到这个包之后发现目的地址不是自己，就把这个包转给下一跳（节点C），</li><li>后续节点都会执行和B一样的流程，直到转到目的地。</li><li>当这个包到达目的节点之后，在节点D的APS层收到之后，会最终给一个端到端的一个Ack给原始节点A</li></ul><p>由此可见，在MAC层是逐跳的确认，在APS层是端到端的确认。</p><p>如果说节点A发给节点B的时候，MAC层发现没有收到这个MAC层的确认，就需要在MAC去重传。</p><p>如果最终发现一段时间之后，没有收到目的节点给它发APS Ack，最终在APS层也会有一个重传</p><h2 id="3-3-MAC帧"><a href="#3-3-MAC帧" class="headerlink" title="3.3 MAC帧"></a>3.3 MAC帧</h2><p>下图演示了MAC帧格式（ZigBee的帧格式）：</p><p><img src="MAC-Frame.png"></p><p>前面的Preamble、SPD和PHY header这些字段都是在物理层由硬件添加的。其中PHY header（物理层头部）是一个字节，这个字节的最高bit预留做其他的用途，剩余的7个bit用于表示这个MAC帧的长度，最多能够表示的长度是127。也就是MAC层最大的帧长度是127个字节。</p><p>在MAC header中有一个2个字节的Frame control字段，该字段的0~2位会标识出这个帧的类型，主要有4种类型的帧：</p><ul><li>Beacon，信标，用于扫描网络</li><li>Data，数据，用于从更高层传输数据</li><li>ACK，确认</li><li>MAC Command，MAC层的命令，包括设备入网时使用的一些命令，比如MAC Association这些命令。</li></ul><p>在每个MAC帧的末尾，有两个字节的CRC用于验证数据包的完整性。无线信号在空中传播容易受到干扰，导致某些比特变化了，这个时候CRC就会不对了，这个帧就会被丢弃掉了。</p><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><p>在这里，我们将介绍ZigBee网络的一些基本概念，包括：</p><ul><li>设备类型</li><li>网络地址<ul><li>PAN ID</li><li>扩展 PAN ID</li></ul></li><li>设备地址<ul><li>节点编号</li><li>Eui64</li></ul></li></ul><h2 id="4-1-设备类型"><a href="#4-1-设备类型" class="headerlink" title="4.1 设备类型"></a>4.1 设备类型</h2><p>IEEE-802.15.4定义了两种设备类型：</p><ul><li><strong>FFD</strong>, 全功能设备，能够执行IEEE 802.15.4标准中描述的所有职责，并且可以在网络中担任任何角色。</li><li><strong>RFD</strong>, 剪裁功能设备，功能有限。</li></ul><p><strong>注意</strong>: RFD设备的处理能力和内存大小通常小于FFD设备。 </p><p>在ZigBee中，存在三种设备类型：</p><ul><li>协调器，Coordinator，他是负责创建网路的，所以他是第一个成员，所以他的地址是0x0000；</li><li>路由设备，Router，可以路由消息，作为网络的中间节点来转发消息；</li><li>终端设备，End Device，包括睡眠终端设备和非睡眠终端设备。作为网络的边缘节点，必须有一个parent，必须附着在一个router或者coordinator上面。不能转发消息，不能做路由用，不能做中间节点用。</li></ul><table><thead><tr><th align="left">设备类型</th><th align="left">创建网络</th><th align="left">路由</th><th align="left">供电方式</th><th align="left">作父节点</th><th align="left"></th></tr></thead><tbody><tr><td align="left">协调器</td><td align="left">是</td><td align="left">是</td><td align="left">主电源</td><td align="left">是</td><td align="left">网络中只有一个，且节点ID始终为0</td></tr><tr><td align="left">路由设备</td><td align="left">否</td><td align="left">是</td><td align="left">主电源</td><td align="left">是</td><td align="left"></td></tr><tr><td align="left">终端设备</td><td align="left">否</td><td align="left">否</td><td align="left">主电源或电池</td><td align="left">否</td><td align="left">必须有父节点</td></tr></tbody></table><p>Coordinator对比Router，除了可以创建网络之外，其余功能是一样的。</p><p>每个设备入网后，都会广播发出一个Announce报文，通知所有的设备，我加入这个网络了。</p><p><img src="ZigBee-Device-Announce.png"></p><p><img src="Device-Type.png"></p><h2 id="4-2-网络地址"><a href="#4-2-网络地址" class="headerlink" title="4.2 网络地址"></a>4.2 网络地址</h2><p><img src="PANID-0.png"></p><p>马鞍山虽然是一个地名，但不是一个精确的地名。据统计，中国可能有二十几个地方叫马鞍山。</p><p>对应到ZigBee网络也会有同样的问题。ZigBee使用PAN ID和扩展的PAN ID来识别网络。</p><p>马鞍山就类似于PAN ID，Extended PAN ID就类似一个全地名，比如说安徽省马鞍山市</p><p>ZigBee是一个低速率的通信技术，本身最大的数据传输速率就只有250Kbps，并且在实际传输的时候有MAC层头部、网络层头部，还有各种安全控制的字段等等，导致的后果就是真正有效的数据载荷占比比较低。这种情况下，如果每次通信仍然使用这个64 bit的PAN ID，就会导致有效载荷占比进一步降低。所以大部分时候的通信都是使用16 bit的PAN ID来标识目的网络，可以改善这种情况。仅在回复节点扫描请求入网的Beacon Request的Beacon报文中，或是进行PAN ID更新时，才会在报文中使用扩展的PAN ID。</p><h3 id="4-2-1-PAN-ID"><a href="#4-2-1-PAN-ID" class="headerlink" title="4.2.1 PAN ID"></a>4.2.1 PAN ID</h3><p>PAN，又称个人区域网络，通过其PAN ID与其他网络分开。这是同一PAN中所有节点将共享的16位标识符。因此，这与以太网世界中的子网掩码类似，因为您通常只与本地网络内的设备通信，在这种情况下为PAN。<strong>该标识符放置在每个传出数据包中的低层MAC层标头中，它使接收该数据包的设备可以过滤出与他们的网络无关的消息。</strong> 他们可以将其与自己的PAN ID进行比较，并确定这是来自自己网络中某人的消息，还是来自恰好在此信道上的其他网络中的某人的消息，因此无需尝试解码或解密。</p><p>0xFFFF这个PANID用于广播，那么所有网络都能收得到。</p><p><img src="PANID-1.png"></p><p><img src="PANID-2.png"></p><p>PAN ID由协调器在网络创建时随机生成，或者在创建网络的时候由用户指定。因为PAN ID是一个网络与另一个网络之间的区别因素，所以它应该是随机的以确保其唯一性。建议您为PAN ID选择一个随机的16位值，以防止您的网络与该区域中碰巧存在的任何其他网络重合。</p><p>现在，如果您碰巧选择了另一个网络已经使用的PAN ID，该怎么办？或者，如果您确实选择了一个与任何其他网络都没有冲突的随机PAN ID，但后来又有另一个网络与您的网络重叠，该怎么办？如果曾经发生过PAN ID冲突，则协议栈实际上可以检测到这种冲突并可以自动更新其PAN ID，并通知其网络中的所有节点都移至新的PAN ID，以便每个节点可以继续与原始网络中的节点进行通信，并排除冲突网络上的任何节点。如果PAN ID冲突，我们需要使用扩展的PAN ID来区分网络。</p><h3 id="4-2-2-扩展-PAN-ID"><a href="#4-2-2-扩展-PAN-ID" class="headerlink" title="4.2.2 扩展 PAN ID"></a>4.2.2 扩展 PAN ID</h3><p>扩展PAN ID是PAN中所有节点都知道的另一个网络标识符。</p><p>正常的短16位PAN ID由于简短，在空中传输的所有数据包中都有包含，但64位扩展PAN ID很少通过空中传输。扩展的PAN ID对于每个PAN也是唯一的，当16位PAN ID不足以始终将一个网络与另一个网络区分开时，它基本上用作备份标准。例如，当发生PAN ID冲突并且您要通知网络中的所有设备更新PAN ID时，将网络与冲突的网络区分开的方式是，网络中的这些设备都共享相同的扩展PAN ID。扩展PAN ID极不可能发生冲突，因为与短PAN ID中的16位相比，它具有64位。</p><p><img src="Ext-PAN-ID.png"></p><p>扩展的PAN ID由协调器在网络创建时随机生成。</p><p>这也是允许您选择网络的有用因素。如果您尝试加入一个网络而不是创建一个网络，那么您可能想知道如何判断哪些网络可用。网络之间可区分的方式不仅在PAN ID中，而且在扩展的PAN ID中。您可能想做一些特别的事情，决定只使用扩展PAN ID的特定子集，以便您可以将网络与其他网络区分开来，但不要太限制自己，因为您限制得越多您发生冲突的可能性就越大，并且如果您的扩展PAN ID曾经发生冲突，您实际上无能为力。它有点像WiFi SSID，不同之处在于WiFi网络之间的SSID可以相同，而ZigBee不同网络间的扩展PAN ID则不能相同。</p><h2 id="4-3-节点地址"><a href="#4-3-节点地址" class="headerlink" title="4.3 节点地址"></a>4.3 节点地址</h2><p>除了其网络范围的标准外，一个节点还通过其单独的节点地址与另一个节点区分开。</p><p>节点具有短地址和长地址。长地址是IEEE分配的MAC地址或EUI-64，称为IEEE地址或MAC地址。它是一个全球唯一的64位地址，这意味着世界上没有两个基于IEEE的无线电设备具有相同的EUI-64。通常在制造时分配。芯片在出厂之前，它们会被分配（IEEE会给芯片厂商分配不同的地址范围），并且它们永远不会改变。它用来区分不同的无线设备。但是因为64位是相对比较大的数据量，所以这个长地址不是经常通过空中发送的。</p><p><img src="Node-Address.png"></p><p>在大多数情况下，为了提供通信的效率，更短的16位地址是通过无线方式使用的。这被称为Short ID或Node ID，在网络中是唯一的，类似于以太网世界中的IP地址。它是在节点进入网络时由他的父节点分配的，并且在该网络内应该是唯一的。可能有两个网络，每个网络都有一个具有相同节点ID的节点，但是因为它们位于不同的PAN中，所以没有关系。</p><p><img src="Node-Address-Get.gif"></p><p><img src="Node-Address-Conflict.gif"></p><p>请注意，短地址有可能会发生变化，因为有可能会产生冲突。两个节点在进入网络时可能选择了相同的随机节点ID。如果发生这种情况，就像PAN ID方案一样，有一种解决冲突的方法。当节点注意到冲突时，基于EUI-64信息作为后备，它们可以商定新地址。因此，如果需要，节点可以根据冲突在运行时更改地址。</p><h1 id="五、应用层"><a href="#五、应用层" class="headerlink" title="五、应用层"></a>五、应用层</h1><p>在应用层中，可以通过实现多个Endpoint将物理设备拆分为多个逻辑设备。</p><h2 id="5-1-Endpoint"><a href="#5-1-Endpoint" class="headerlink" title="5.1 Endpoint"></a>5.1 Endpoint</h2><p>每个Endpoint代表一个逻辑设备。例如，如果我们有一个带有6个插座的智能插座适配器。我们可以使用6个Endpoint来实现它，以便我们可以分别打开/关闭每个插座。</p><p><img src="Endpoint.png"></p><p>Endpoint ID是一个8位的值，范围从0到255。</p><ul><li>Endpoint 0保留给ZigBee设备对象，主要用于管理目的。</li><li>用户应用程序可以使用Endpoint 1至239。</li><li>Endpoint 240到254保留用于特殊应用。像ZigBee Green Power一样，使用专用Endpoint 242。</li><li>Endpoint 255用于广播，所有的Endpoint都能收到。</li></ul><p><img src="Endpoint-to-Endpoint.png"></p><p>应用层的通信模型实际上是通信双方Endpoint之间的通信，一侧的Endpoint作为Client，另一侧的Endpoint作为Server。Client和Server之间通信的内容和格式，是由Cluster来定义的。</p><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZigBee 3.0理论教程-通用-1-01：概述</title>
      <link href="/zigbee-3.0-1-1-1/"/>
      <url>/zigbee-3.0-1-1-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><p><img src="NZSA-V1.1.png"></p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><h1 id="一、什么是ZigBee"><a href="#一、什么是ZigBee" class="headerlink" title="一、什么是ZigBee"></a>一、什么是ZigBee</h1><p>随着物联网（IoT）行业的发展，越来越多的无线技术应运而生。</p><p><img src="IoT-Wireless-Technologies.png"></p><p>众所周知，在物联网行业中，我们有两种典型的网络。一个是WAN（广域网），另一个是PAN（个人区域网）。</p><ul><li>对于LoRa，NB-IoT，2G / 3G / 4G等无线技术，通常传输距离超过1 km，因此它们主要用于广域网（WAN）。</li><li>对于WiFi，蓝牙，BLE，ZigBee和Zwave等无线技术，通常的传输距离小于1公里，因此它们主要用于个人局域网（PAN）。</li></ul><p>ZigBee是IoT网络（尤其是家庭自动化行业）中最流行的无线技术之一。其主要特点包括：</p><ul><li>短距离 – 无线覆盖范围在10到100米之间；</li><li>低速率 – 最大数据速率为250 Kbps；</li><li>低功耗 – 处于睡眠状态的Endpoint设备在睡眠模式下可以使用低于5uA的电流；</li><li>网状网 – 网络可以轻松扩展到很大。理论上最大节点数为65535。</li></ul><h1 id="二、ZigBee的网络拓扑"><a href="#二、ZigBee的网络拓扑" class="headerlink" title="二、ZigBee的网络拓扑"></a>二、ZigBee的网络拓扑</h1><p>常见的网络拓扑结构主要有星形（Star）网络和网状（Mesh）网络两种。</p><p><img src="Star-vs-Mesh.png"></p><p>传统的星形网络的结构最典型的例子就是家庭WiFi场景。家里的WiFi无线路由器就是一个中心节点，家里所有的WiFi设备都要通过这个中心节点才能够上网。如果WiFi路由器坏了的话，整个网络中的所有设备就都上不了网了。</p><p><img src="Single-Point-Failure.png"></p><p>网络中如果有中心节点的话就很容易出现单点故障，然而Mesh网络结构中没有一个明显的所谓的中心节点，因此Mesh网络具有更高的网络可靠性。比如在ZigBee Mesh网络中，任意一个节点故障了，其余的节点仍然可以正常工作（就算是Coordinator发生故障，除了新设备不能加入之外，其余所有节点仍然可以正常工作）。</p><h1 id="三、ZigBee的历史"><a href="#三、ZigBee的历史" class="headerlink" title="三、ZigBee的历史"></a>三、ZigBee的历史</h1><p>ZigBee诞生在2003年，是<a href="https://zigbeealliance.org/">ZigBee联盟</a>发布和修订的开放标准，历史悠久。</p><p><img src="ZigBee-History.png"></p><p>从一(很早)开始，Silicon Labs就致力于ZigBee技术。Silicon Labs的ZigBee技术来自Ember，Ember是一家自成立以来就开始研究ZigBee的公司。2012年，Silicon Labs收购了Ember，并继续提供ZigBee产品和解决方案。</p><h1 id="四、ZigBee联盟"><a href="#四、ZigBee联盟" class="headerlink" title="四、ZigBee联盟"></a>四、ZigBee联盟</h1><p>ZigBee联盟是推广ZigBee技术的主要力量。这是一个开放的组织。任何公司都可以加入ZigBee联盟作为成员。Silicon Labs是ZigBee联盟的董事会成员。</p><p><img src="ZigBee-Alliance.png"></p><p>ZigBee联盟的主要三个工作是：</p><ul><li>为IoT（物联网）的无线设备端到设备端的通信<strong>制定</strong>开放的全球标准  </li><li>通过我们的认证计划对产品进行<strong>认证</strong>，以帮助确保互操作性  </li><li>在全球范围内<strong>推广</strong>我们的标准  </li></ul><p>2016年，ZigBee联盟发布了最新的ZigBee标准，即ZigBee 3.0。之前使用的配置文件（如ZigBee Home Automation（ZHA），ZigBee Light Link（ZLL）等）已统一在一起。</p><p><img src="ZigBee-Profiles.png"></p><p>此外，随着安全性变得越来越重要，安全性得到了增强。</p><p>自2017年起，ZigBee 3.0规范就是强制的。所有不满足ZigBee 3.0规范的新设备，将无法通过认证。</p><p>认证主要分为两种：</p><ul><li>ZigBee兼容性平台的认证，主要针对于芯片厂商的ZigBee芯片，以及对应的ZigBee协议栈；</li><li>ZigBee兼容性产品的认证，主要针对于基于ZigBee兼容性平台开发的产品。</li></ul><p>&nbsp;</p><center>    <font size=5>        <font color='red'><strong>持续更新中，欢迎关注！</strong></font>    </font></center><p>&nbsp;</p><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【所有相关<font color='red'><strong>IDE</strong></font>和<font color='red'><strong>SDK</strong></font>均可从群文件<font color='red'><strong>免费获取</strong></font>，也全都是<font color='red'><strong>免安装</strong></font>的，解压出来直接就能开始开发】    </font></center><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> zigbee 3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZigBee 3.0 </tag>
            
            <tag> Z-Stack </tag>
            
            <tag> EmberZnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB进阶教程-02：ARIMA时间序列预测</title>
      <link href="/matlab-2-2/"/>
      <url>/matlab-2-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB进阶教程-01：目录</title>
      <link href="/matlab-2-1/"/>
      <url>/matlab-2-1/</url>
      
        <content type="html"><![CDATA[<p>本专题的目录安排如下：</p><ul><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-2-1/">MATLAB进阶教程-01：目录</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-2-2/">MATLAB进阶教程-02：ARIMA时间序列预测</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-13：如何更改MATLAB启动时的默认工作路径</title>
      <link href="/matlab-1-13/"/>
      <url>/matlab-1-13/</url>
      
        <content type="html"><![CDATA[<h1 id="一、查看起始位置"><a href="#一、查看起始位置" class="headerlink" title="一、查看起始位置"></a>一、查看起始位置</h1><p>找到matlab的快捷方式，右击查看该快捷方式的属性，如下图所示：<br><img src="kuaijiefangshi1.png"><br>由上图可见，<strong>起始位置</strong> 指向了matlab的安装目录。</p><h1 id="二、确认起始位置"><a href="#二、确认起始位置" class="headerlink" title="二、确认起始位置"></a>二、确认起始位置</h1><p>此时通过matlab程序的快捷方式打开matlab之后，界面如下图所示：<br><img src="matlab1.png"><br>由上图可见，matlab软件当前的工作路径与 <strong>起始位置</strong> 中指向的位置是一致的。关闭matlab软件。</p><h1 id="三、修改起始位置"><a href="#三、修改起始位置" class="headerlink" title="三、修改起始位置"></a>三、修改起始位置</h1><p>再次找到matlab的快捷方式，右击查看该快捷方式的属性，将其中的 <strong>起始位置</strong> 修改为自己想要指定的工作路径，如下图所示：<br><img src="kuaijiefangshi2.png"><br>修改完成之后，点击“确定”退出。</p><h1 id="四、再次确认起始位置"><a href="#四、再次确认起始位置" class="headerlink" title="四、再次确认起始位置"></a>四、再次确认起始位置</h1><p>再次通过matlab程序的快捷方式打开matlab之后，界面如下图所示：<br><img src="matlab2.png"><br>由上图可见，matlab软件当前的工作路径已经变为了刚刚新设置的路径了。</p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-12：项目</title>
      <link href="/matlab-1-12/"/>
      <url>/matlab-1-12/</url>
      
        <content type="html"><![CDATA[<h1 id="项目一、用电量"><a href="#项目一、用电量" class="headerlink" title="项目一、用电量"></a>项目一、用电量</h1><p>绘制各经济部门的用电量（10^9 kWh/天）图 - 居民用电、商业用电和工业用电。<br>分析哪个经济部门的用电量将是最大的？</p><h2 id="1-1-导入数据"><a href="#1-1-导入数据" class="headerlink" title="1.1 导入数据"></a>1.1 导入数据</h2><pre class="line-numbers language-none"><code class="language-none">输入：load electricity.matusage结果：usage &#x3D;3.0484    2.5848    2.64082.8610    2.5530       NaN3.2602    2.7084    2.73453.3420    2.8097    2.80193.3555    2.9167    2.79603.4234    2.9299    2.85793.5268    3.1561    2.85973.9185    3.3057    2.87573.9718    3.4761    2.99843.8540    3.4748    2.89983.8934    3.5968    2.68264.3127    3.7088    2.84274.2153    3.7172    2.83014.1711    3.7257    2.85424.6605    3.9367    2.85124.7528    4.0497    2.86714.4847    3.9975    2.87154.6216    4.1299    2.84874.4413    3.9229    2.51764.9899    4.1266    2.76534.9913    4.1311    2.81434.9864    4.1463    2.81354.6270    4.1205    2.7001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-替换-NaN"><a href="#1-2-替换-NaN" class="headerlink" title="1.2 替换 NaN"></a>1.2 替换 NaN</h2><pre class="line-numbers language-none"><code class="language-none">输入：usage(2,3)&#x3D;2.74usage(2,3)结果：ans &#x3D;2.7400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-提取、准备数据"><a href="#1-3-提取、准备数据" class="headerlink" title="1.3 提取、准备数据"></a>1.3 提取、准备数据</h2><pre class="line-numbers language-none"><code class="language-none">输入：res &#x3D; usage(:,1)comm &#x3D; usage(:,2)ind &#x3D; usage(:,3)yrs &#x3D; (1991:2013)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-绘图"><a href="#1-4-绘图" class="headerlink" title="1.4 绘图"></a>1.4 绘图</h2><pre class="line-numbers language-none"><code class="language-none">输入：hold onplot(yrs, res, &quot;b--&quot;)plot(yrs, comm, &quot;k:&quot;)plot(yrs, ind, &quot;m-.&quot;)hold off结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="yongdianliang1.png"></p><h2 id="1-5-加标注"><a href="#1-5-加标注" class="headerlink" title="1.5 加标注"></a>1.5 加标注</h2><pre class="line-numbers language-none"><code class="language-none">输入：title(&quot;July Electricity Usage&quot;)legend(&quot;res&quot;, &quot;comm&quot;, &quot;ind&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="yongdianliang2.png"></p><h2 id="1-6-优化图例"><a href="#1-6-优化图例" class="headerlink" title="1.6 优化图例"></a>1.6 优化图例</h2><pre class="line-numbers language-none"><code class="language-none">输入：legend(&quot;res&quot;, &quot;comm&quot;, &quot;ind&quot;, &#39;Location&#39;, &#39;northwest&#39;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="yongdianliang3.png"></p><h1 id="项目二、音频频率"><a href="#项目二、音频频率" class="headerlink" title="项目二、音频频率"></a>项目二、音频频率</h1><p>音频信号通常由许多不同的频率组成。<br>例如，在音乐中，音符“中央 C”的基率为 261.6 Hz，并且大多数音乐都包含多个同时演奏的音符（或频率）。<br>分析风琴演奏 C 和弦的频谱。<br>C 和弦由 C (261.6 Hz)、E (329.6 Hz) 和 G (392.0 Hz) 音符组成。<br>此频率图中突出显示的点对应于每个音符。</p><p>C 和弦录音存储在一个名为 Cchord.mat 的文件中。此文件包含两个变量：</p><ul><li>y：录音信号（1*12288，行向量）</li><li>fs：采样频率（8192，标量）</li></ul><h2 id="2-1-导入数据"><a href="#2-1-导入数据" class="headerlink" title="2.1 导入数据"></a>2.1 导入数据</h2><pre class="line-numbers language-none"><code class="language-none">输入：load Cchord.mat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-2-提取、准备数据"><a href="#2-2-提取、准备数据" class="headerlink" title="2.2 提取、准备数据"></a>2.2 提取、准备数据</h2><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; numel(y) % numel函数可以返回数组中的元素数目t &#x3D; 0:n-1 % t的范围：0~12287t &#x3D; t&#x2F;fs % t的范围：0~1.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-绘图"><a href="#2-3-绘图" class="headerlink" title="2.3 绘图"></a>2.3 绘图</h2><pre class="line-numbers language-none"><code class="language-none">输入：plot(t,y)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="cchord.png"></p><h2 id="2-4-离散傅里叶变换"><a href="#2-4-离散傅里叶变换" class="headerlink" title="2.4 离散傅里叶变换"></a>2.4 离散傅里叶变换</h2><pre class="line-numbers language-none"><code class="language-none">输入：yfft &#x3D; abs(fft(y))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-5-再绘图"><a href="#2-5-再绘图" class="headerlink" title="2.5 再绘图"></a>2.5 再绘图</h2><pre class="line-numbers language-none"><code class="language-none">输入：f &#x3D; 0:n-1f &#x3D; f*fs&#x2F;nplot(f,yfft)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="cchord2.png"></p><h2 id="2-6-放大指定区间"><a href="#2-6-放大指定区间" class="headerlink" title="2.6 放大指定区间"></a>2.6 放大指定区间</h2><p>f 将包含从 0 到 fs 的频率。<br>主频位于 f 的开头位置。<br>可以使用 xlim 函数放大所关注的区域。</p><pre class="line-numbers language-none"><code class="language-none">输入：xlim([0 1000])结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="cchord3.png"></p><h2 id="2-7-标注"><a href="#2-7-标注" class="headerlink" title="2.7 标注"></a>2.7 标注</h2><p>使用输出窗格中的数据游标可以查看频率位置。</p><p><img src="biaozhu.png"></p><p>前三个峰值是构成中央 C 和弦的音符。</p><h1 id="三、恒星运动"><a href="#三、恒星运动" class="headerlink" title="三、恒星运动"></a>三、恒星运动</h1><p>Stellar Motion<br>Instructions are in the task pane to the left. Complete and submit each task one at a time.</p><p>Do not edit. This code loads the data and defines measurement parameters.<br>load starData<br>nObs = size(spectra,1)<br>lambdaStart = 630.02<br>lambdaDelta = 0.14</p><p>lambdaEnd = lambdaStart + (nObs-1)*lambdaDelta<br>lambda = [lambdaStart:lambdaDelta:lambdaEnd]’</p><p>s = spectra(:,6)</p><p>loglog(lambda, s, “.-“)<br>xlabel(“Wavelength”)<br>ylabel(“Intensity”)</p><p>[sHa, idx] = min(s)<br>lambdaHa = lambda(idx)</p><p>hold on<br>loglog(lambdaHa, sHa, “rs”, “MarkerSize”, 8)<br>hold off</p><p>z = (lambdaHa/656.28)-1<br>speed = z*299792.458</p><p><img src="star1.png"></p><p><img src="star2.png"></p><p><img src="star3.png"></p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-11：绘制数据图、数据可视化</title>
      <link href="/matlab-1-11/"/>
      <url>/matlab-1-11/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">输入：load datafiledata结果：data &#x3D;3.0000    0.5300    4.0753    0.5000   18.0000    1.7800    6.6678    2.1328   19.0000    0.8600    1.5177    3.6852   20.0000    1.6000    3.6375    8.5389   21.0000    3.0000    4.7243   10.1570   23.0000    6.1100    9.0698    2.8739   38.0000    2.5400    5.3002    4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">输入：sample &#x3D; data(:,1)density &#x3D; data(:,2)v1 &#x3D; data(:,3);v2 &#x3D; data(:,4);mass1 &#x3D; density.*v1mass2 &#x3D; density.*v2结果：sample &#x3D; 3181920212338density &#x3D;0.53001.78000.86001.60003.00006.11002.5400mass1 &#x3D;2.1599   11.86871.30525.8200   14.1729   55.4165   13.4626mass2 &#x3D;0.26503.79643.1693   13.6622   30.4710   17.5595   11.3050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、plot-函数绘图"><a href="#一、plot-函数绘图" class="headerlink" title="一、plot 函数绘图"></a>一、plot 函数绘图</h1><h2 id="1-1-单变量绘图"><a href="#1-1-单变量绘图" class="headerlink" title="1.1 单变量绘图"></a>1.1 单变量绘图</h2><p>当单独绘制一个向量时，MATLAB 会使用向量值作为 y 轴数据，并将 x 轴数据的范围设置为从 1 到 n（向量中的元素数目）。<br>示例：使用 <strong>plot</strong> 函数绘制向量 <strong>mass1</strong>。</p><pre class="line-numbers language-none"><code class="language-none">输入：plot(mass1)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="danbianliang.png"></p><h2 id="1-2-双变量绘图"><a href="#1-2-双变量绘图" class="headerlink" title="1.2 双变量绘图"></a>1.2 双变量绘图</h2><p>使用 <strong>plot</strong> 函数在一张图上绘制两个相同长度的向量。<br>示例：创建一个绘图，其中 sample 位于 x 轴，mass1 位于 y 轴。</p><pre class="line-numbers language-none"><code class="language-none">输入：plot(sample, mass1)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="shuangbianliang.png"></p><h2 id="1-3-叠加绘图"><a href="#1-3-叠加绘图" class="headerlink" title="1.3 叠加绘图"></a>1.3 叠加绘图</h2><p>每个绘图命令都创建了一个单独的绘图。要在一张图上先后绘制两条线，需要使用 <strong>hold on</strong> 命令保留之前的绘图，然后在上一张图的坐标区域内添加另一条线。<br><font color='red'>注：一旦启用保留状态，将始终在同一坐标区上绘图。如果要恢复默认绘图行为，即其中每个绘图都有自己的坐标区，需要通过输入 <strong>hold off</strong> 来退出保留状态。</font><br>示例：在上一张图的坐标区域内，绘制 mass2（y 轴）对 sample（x 轴）的图。</p><pre class="line-numbers language-none"><code class="language-none">输入：hold onplot(sample, mass2)hold off结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="diejia.png"></p><h2 id="1-4-线条设置"><a href="#1-4-线条设置" class="headerlink" title="1.4 线条设置"></a>1.4 线条设置</h2><h3 id="1-4-1-颜色、线型和标记符号"><a href="#1-4-1-颜色、线型和标记符号" class="headerlink" title="1.4.1 颜色、线型和标记符号"></a>1.4.1 颜色、线型和标记符号</h3><p><strong>plot</strong> 函数接受 <strong>线条设定</strong> 作为参数来设定线条的</p><ul><li>颜色</li><li>标记符号</li><li>线型</li></ul><p><font color='red'>注：这3个参数不要求全填，也没有先后顺序。</font><br>示例：重新绘制 mass1（y 轴）对 sample（x 轴）的图，使用红色（r）+ 圆圈（o）作为标记 + 虚线（–）。</p><pre class="line-numbers language-none"><code class="language-none">输入：plot(sample, mass1, &quot;ro--&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="chonghuamass1.png"></p><p>可以在<a href="https://ww2.mathworks.cn/help/matlab/ref/linespec.html">线条设定的文档</a>中了解更多有关线条设定的详细信息。</p><h3 id="1-4-2-线宽"><a href="#1-4-2-线宽" class="headerlink" title="1.4.2 线宽"></a>1.4.2 线宽</h3><p><strong>plot</strong> 函数接受 <strong>线条宽度</strong> 作为参数（属性名称-属性值对组）来设定线条的宽度。在<a href="https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html">线条属性文档</a>中可以了解更多可用属性的详细信息。<br>示例：重新绘制 mass1（y 轴）对 sample（x 轴）的图，线宽为 3。</p><pre class="line-numbers language-none"><code class="language-none">输入：plot(sample, mass1, &quot;LineWidth&quot;, 3)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="xiankuan.png"></p><h2 id="1-5-综合绘图"><a href="#1-5-综合绘图" class="headerlink" title="1.5 综合绘图"></a>1.5 综合绘图</h2><p>使用 <strong>plot</strong> 函数时，您可在绘图函数中依次使用参数</p><ul><li>变量</li><li>线条设定符：颜色、线型和标记符号</li><li>属性名称-属性值对组</li></ul><p><font color='red'>注：这3大部分顺序不能颠倒！</font><br>示例：重新绘制 mass1（y 轴）对 sample（x 轴）的图，使用红色（r）+ 圆圈（o）作为标记 + 虚线（–），线宽为 3。</p><pre class="line-numbers language-none"><code class="language-none">输入：plot(sample, mass1, &quot;ro--&quot;, &quot;LineWidth&quot;, 3)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="zonghe.png"></p><h1 id="二、MATLAB图库绘图"><a href="#二、MATLAB图库绘图" class="headerlink" title="二、MATLAB图库绘图"></a>二、MATLAB图库绘图</h1><p><strong>plot</strong> 函数主要用来绘制线条。MATLAB 中还有许多其他绘图函数。在 <a href="https://ww2.mathworks.cn/products/matlab/plot-gallery.html">MATLAB 图库</a>中可以看到更多详尽的列表。每个绘图都有其不同的自定义选项。<br>示例：用 histogram 函数创建一个 density 的直方图。将 “FaceColor” 设置为黄色 (“y”)。</p><pre class="line-numbers language-none"><code class="language-none">输入：histogram(density, &quot;FaceColor&quot;, &quot;y&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="histogram.png"></p><h1 id="三、编写绘图注释"><a href="#三、编写绘图注释" class="headerlink" title="三、编写绘图注释"></a>三、编写绘图注释</h1><pre class="line-numbers language-none"><code class="language-none">输入：plot(sample,mass1,&quot;ks-&quot;)hold onplot(sample,mass2,&quot;r*-&quot;)hold off结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="commentstart.png"></p><p>可以使用绘图注释函数在绘图中添加标签。此类函数的输入是一个字符串。MATLAB 中的字符串是用双引号 (“) 引起来的。</p><h2 id="3-1-添加标题"><a href="#3-1-添加标题" class="headerlink" title="3.1 添加标题"></a>3.1 添加标题</h2><p>示例：为现有绘图添加标题 “Sample Mass”。</p><pre class="line-numbers language-none"><code class="language-none">输入：title(&quot;Sample Mass&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="title.png"></p><h2 id="3-2-添加-x-y-轴标签"><a href="#3-2-添加-x-y-轴标签" class="headerlink" title="3.2 添加 x/y 轴标签"></a>3.2 添加 x/y 轴标签</h2><p>示例：为现有绘图的 x 轴和 y 轴分别添加标签 “Sample” 和 “Mass (g)”。</p><pre class="line-numbers language-none"><code class="language-none">输入：xlabel(&quot;Sample&quot;)ylabel(&quot;Mass (g)&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="xylabel.png"></p><h2 id="3-3-添加图例"><a href="#3-3-添加图例" class="headerlink" title="3.3 添加图例"></a>3.3 添加图例</h2><p>示例：创建一个图例，其中依次包含标签 “Exp A” 和 “Exp B”。</p><pre class="line-numbers language-none"><code class="language-none">输入：legend(&quot;Exp A&quot;, &quot;Exp B&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="legend.png"></p><p>示例：将上图中图例的位置调整到左上角。</p><pre class="line-numbers language-none"><code class="language-none">输入：legend(&quot;Exp A&quot;, &quot;Exp B&quot;, &#39;Location&#39;, &#39;northwest&#39;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="legend2.png"></p><h2 id="3-4-使用变量添加注释"><a href="#3-4-使用变量添加注释" class="headerlink" title="3.4 使用变量添加注释"></a>3.4 使用变量添加注释</h2><p>您可以在绘图注释中使用变量的值，方法是将字符串与变量串联起来。<br>示例：</p><pre class="line-numbers language-none"><code class="language-none">输入：bar(data(3,:))title(&quot;Sample &quot; + sample(3) + &quot; Data&quot;)结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="bartitle.png"></p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-10：编程</title>
      <link href="/matlab-1-10/"/>
      <url>/matlab-1-10/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">输入：load datafiledata结果：data &#x3D;0.5300    4.0753       NaN1.7800    6.6678    2.13280.8600    1.5177    3.68521.6000    3.6375    8.53893.0000    4.7243   10.15706.1100    9.0698    2.87392.5400    5.3002    4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、决策分支"><a href="#一、决策分支" class="headerlink" title="一、决策分支"></a>一、决策分支</h1><p>仅当条件为 true 时，才执行 if 代码块的主体；<br>当希望在所设条件不成立时执行其他代码，可以使用 else 关键字；<br>elseif 关键字可在 if 后使用，以添加更多条件，可以包括多个 elseif 代码块。</p><pre class="line-numbers language-none"><code class="language-none">输入：density &#x3D; data(:,1);doPlot &#x3D; randi([0 1])if (doPlot &#x3D;&#x3D; 0)plot(density)title(&quot;Sample Densities&quot;)xticklabels(element)ylabel(&quot;Density (g&#x2F;cm^3)&quot;)elsedisp(&quot;The density of &quot; + element + &quot; is &quot; + density)end当 doPlot &#x3D;&#x3D; 1 时，结果：    &quot;The density of Lithium is 0.53&quot;    &quot;The density of Argon is 1.78&quot;    &quot;The density of Potassium is 0.86&quot;    &quot;The density of Calcium is 1.6&quot;    &quot;The density of Scandium is 3&quot;    &quot;The density of Vanadium is 6.11&quot;    &quot;The density of Strontium is 2.54&quot;当 doPlot &#x3D;&#x3D; 0 时，结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="ifelse.png"></p><h1 id="二、for-循环"><a href="#二、for-循环" class="headerlink" title="二、for 循环"></a>二、for 循环</h1><p>循环执行 7 次，循环计数器命名为 idx。首次执行循环时，idx 的值应为 1，并且每次迭代时递增 1。</p><pre class="line-numbers language-none"><code class="language-none">输入：for idx &#x3D; 1:7hold onplot(idx,density(idx),&#39;*&#39;)hold offpause(1)end结果：（见下图）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="for.png"></p><p>该循环执行 7 次，因为 density 向量有七个元素。如果对未知长度的向量执行循环，可以改用 length 函数。</p><pre class="line-numbers language-none"><code class="language-none">输入：for idx &#x3D; 1:length(density)hold onplot(idx,density(idx),&#39;*&#39;)hold offpause(1)end结果：（和上图效果完全一样）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-09：函数</title>
      <link href="/matlab-1-9/"/>
      <url>/matlab-1-9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、生成类"><a href="#一、生成类" class="headerlink" title="一、生成类"></a>一、生成类</h1><h2 id="1-1-linspace-等间距向量"><a href="#1-1-linspace-等间距向量" class="headerlink" title="1.1 linspace-等间距向量"></a>1.1 linspace-等间距向量</h2><p>linspace(first,last,number_of_elements)</p><p><strong>注意，使用逗号 (,) 分隔 linspace 函数的输入。</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; linspace(0,1,5)结果：x &#x3D; 0    0.250    0.500    0.750    1.000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-zeros-全零矩阵"><a href="#1-2-zeros-全零矩阵" class="headerlink" title="1.2 zeros-全零矩阵"></a>1.2 zeros-全零矩阵</h2><p>生成一个 (n×n) 的全零方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; zeros(2)结果：x &#x3D; 0    00    0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个 (m×n) 的全零非方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; zeros(2,3)结果：x &#x3D; 0    0    00    0    0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-rand-均匀分布的随机数矩阵"><a href="#1-3-rand-均匀分布的随机数矩阵" class="headerlink" title="1.3 rand-均匀分布的随机数矩阵"></a>1.3 rand-均匀分布的随机数矩阵</h2><p>生成一个 (n×n) 的方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; rand(2)结果：x &#x3D; 0.8147    0.12700.9058    0.9134<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个 (m×n) 的非方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; rand(2,3)结果：x &#x3D; 0.6324    0.2785    0.95750.0975    0.5469    0.9649<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-randi-均匀分布的伪随机整数矩阵"><a href="#1-4-randi-均匀分布的伪随机整数矩阵" class="headerlink" title="1.4 randi-均匀分布的伪随机整数矩阵"></a>1.4 randi-均匀分布的伪随机整数矩阵</h2><p>生成一个由 1~10 的随机整数组成的 (5×5) 方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; randi(10,5)结果：x &#x3D; 9     1     2     2     710     3    10     5     1 2     6    10    10     910    10     5     8    10 7    10     9    10     7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个取值范围为 1~20 的随机整数的 (5×7) 的非方阵：</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; randi(20,5,7)结果：x &#x3D;17     9    10     6    10    16    2014     8     9    14    20     6    11 7    16    13    14     7    11     320    16    15     4    12    14     3 1     4    16     3     5    18     6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个由样本区间 [-5,5] 中均匀分布的随机整数组成的 (4×5) 的矩阵：</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; randi([-5,5],4,5)结果：x &#x3D; 4    -5     3     2     2 2    -1    -3     2     2-2    -1     0     3    -4 5     3    -1    -2    -4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-randn-正态分布随机数矩阵"><a href="#1-5-randn-正态分布随机数矩阵" class="headerlink" title="1.5 randn-正态分布随机数矩阵"></a>1.5 randn-正态分布随机数矩阵</h2><p>生成一个由正态分布的随机数组成的 (n×n) 的方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; randn(5)结果：x &#x3D;0.5377   -1.3077   -1.3499   -0.2050    0.67151.8339   -0.4336    3.0349   -0.1241   -1.2075   -2.2588    0.3426    0.7254    1.4897    0.71720.8622    3.5784   -0.0631    1.4090    1.63020.3188    2.7694    0.7147    1.4172    0.4889<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个由正态分布的随机数组成的 (m×n) 的非方阵</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; randn(5,7)结果：x &#x3D;0.3035   -0.1941    0.9610   -1.2078   -0.4686   -2.0518    0.2820   -0.6003   -2.1384    0.1240    2.9080   -0.2725   -0.3538    0.03350.4900   -0.8396    1.4367    0.8252    1.0984   -0.8236   -1.33370.7394    1.3546   -1.9609    1.3790   -0.2779   -1.5771    1.12751.7119   -1.0722   -0.1977   -1.0582    0.7015    0.5080    0.3502<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、计算类"><a href="#二、计算类" class="headerlink" title="二、计算类"></a>二、计算类</h1><h2 id="2-1-abs-绝对值"><a href="#2-1-abs-绝对值" class="headerlink" title="2.1 abs-绝对值"></a>2.1 abs-绝对值</h2><h2 id="2-2-eig-特征值"><a href="#2-2-eig-特征值" class="headerlink" title="2.2 eig-特征值"></a>2.2 eig-特征值</h2><h2 id="2-3-sin-正弦值"><a href="#2-3-sin-正弦值" class="headerlink" title="2.3 sin-正弦值"></a>2.3 sin-正弦值</h2><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; sin(pi&#x2F;2)结果：x &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-cos-余弦值"><a href="#2-4-cos-余弦值" class="headerlink" title="2.4 cos-余弦值"></a>2.4 cos-余弦值</h2><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; cos(pi)结果：x &#x3D; -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-sqrt-平方根"><a href="#2-5-sqrt-平方根" class="headerlink" title="2.5 sqrt-平方根"></a>2.5 sqrt-平方根</h2><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; sqrt(-9)结果：x &#x3D; 0.0000 + 3.0000i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：解中包含虚数 i，这是 MATLAB 中的内置常量。</strong></p><h2 id="2-6-size-获取矩阵大小"><a href="#2-6-size-获取矩阵大小" class="headerlink" title="2.6 size-获取矩阵大小"></a>2.6 size-获取矩阵大小</h2><p>返回结果是由被计算矩阵的行和列组成的 (1×2) 的行向量</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [1,2;3,4;5,6]y &#x3D; size(x)结果：x &#x3D;1     23     45     6y &#x3D;3     2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：创建同等大小矩阵</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; rand(3,2)y &#x3D; rand(size(x))结果：y &#x3D; 0.4302    0.25810.1848    0.40870.9049    0.5949<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、获取函数的多个输出"><a href="#三、获取函数的多个输出" class="headerlink" title="三、获取函数的多个输出"></a>三、获取函数的多个输出</h1><pre class="line-numbers language-none"><code class="language-none">输入：load dataFiledatav &#x3D; data(:,4)结果：data &#x3D;3.0000    0.5300    4.0753    0.5000   18.0000    1.7800    6.6678    2.1328   19.0000    0.8600    1.5177    3.6852   20.0000    1.6000    3.6375    8.5389   21.0000    3.0000    4.7243   10.1570   23.0000    6.1100    9.0698    2.8739   38.0000    2.5400    5.3002    4.4508v &#x3D;   0.5000   2.1328   3.6852   8.5389  10.1570   2.8739   4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-size-获取矩阵大小"><a href="#3-1-size-获取矩阵大小" class="headerlink" title="3.1 size-获取矩阵大小"></a>3.1 size-获取矩阵大小</h2><p>size 函数可以生成单个输出变量或两个输出变量。使用方括号 ([ ]) 可以获得多个输出。</p><pre class="line-numbers language-none"><code class="language-none">输入：[dr dc] &#x3D; size(data)结果：dr &#x3D; 7dc &#x3D; 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-max-获取最大值"><a href="#3-2-max-获取最大值" class="headerlink" title="3.2 max-获取最大值"></a>3.2 max-获取最大值</h2><p>当使用 max 函数只获取单个输出时，输出为：输入向量的最大值。</p><pre class="line-numbers language-none"><code class="language-none">输入：vMax &#x3D; max(v)结果：vMax &#x3D;   10.1570<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行带两个输出的调用时，输出为：输入向量的最大值+对应的索引值。</p><pre class="line-numbers language-none"><code class="language-none">输入：[vMax ivMax] &#x3D; max(v)结果：vMax &#x3D;   10.1570ivMax &#x3D; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只需函数的第二个输出，可以使用波浪号字符 (~) 忽略特定输出。</p><h2 id="3-3-min-获取最小值"><a href="#3-3-min-获取最小值" class="headerlink" title="3.3 min-获取最小值"></a>3.3 min-获取最小值</h2><pre class="line-numbers language-none"><code class="language-none">输入：vMin &#x3D; min(v)结果：vMin &#x3D;0.5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-round-四舍五入取整"><a href="#3-4-round-四舍五入取整" class="headerlink" title="3.4 round-四舍五入取整"></a>3.4 round-四舍五入取整</h2><p>round 函数可对整个向量或值数组执行数学运算。</p><pre class="line-numbers language-none"><code class="language-none">输入：vRound &#x3D; round(v)结果：vRound &#x3D; 1 2 4 910 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-08：数组运算</title>
      <link href="/matlab-1-8/"/>
      <url>/matlab-1-8/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">输入：load datafiledatadensity &#x3D; data(:,2)v1 &#x3D; data(:,3)v2 &#x3D; data(:,4)结果：data &#x3D;3.0000    0.5300    4.0753    0.5000   18.0000    1.7800    6.6678    2.1328   19.0000    0.8600    1.5177    3.6852   20.0000    1.6000    3.6375    8.5389   21.0000    3.0000    4.7243   10.1570   23.0000    6.1100    9.0698    2.8739   38.0000    2.5400    5.3002    4.4508density &#x3D;0.53001.78000.86001.60003.00006.11002.5400v1 &#x3D;   4.0753   6.6678   1.5177   3.6375   4.7243   9.0698   5.3002v2 &#x3D;   0.5000   2.1328   3.6852   8.5389  10.1570   2.8739   4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、数组与标量"><a href="#一、数组与标量" class="headerlink" title="一、数组与标量"></a>一、数组与标量</h1><h2 id="1-1-加减"><a href="#1-1-加减" class="headerlink" title="1.1 加减"></a>1.1 加减</h2><p>可以将一个数组与一个标量值相加，实际是与数组中的所有元素相加。</p><pre class="line-numbers language-none"><code class="language-none">输入：r &#x3D; v1 + 1结果：r &#x3D;5.07537.66782.51774.63755.7243   10.06986.3002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-乘除"><a href="#1-2-乘除" class="headerlink" title="1.2 乘除"></a>1.2 乘除</h2><p>以将数组中的所有元素与某个标量相乘或相除。</p><pre class="line-numbers language-none"><code class="language-none">输入：va &#x3D; vs&#x2F;2结果：va &#x3D;2.28774.40032.60146.08827.44065.97184.8755<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、数组与数组"><a href="#二、数组与数组" class="headerlink" title="二、数组与数组"></a>二、数组与数组</h1><h2 id="2-1-加减"><a href="#2-1-加减" class="headerlink" title="2.1 加减"></a>2.1 加减</h2><p>可以将任意两个<strong>大小相同</strong>的数组相加。</p><pre class="line-numbers language-none"><code class="language-none">输入：vs &#x3D; v1 + v2结果：vs &#x3D;4.57538.80065.2029   12.1764   14.8813   11.94379.7510<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-点乘"><a href="#2-2-点乘" class="headerlink" title="2.2 点乘"></a>2.2 点乘</h2><p>.* 运算符执行按元素乘法，允许您将两个大小相同的数组的对应元素相乘。</p><pre class="line-numbers language-none"><code class="language-none">输入：mass &#x3D; density .* va结果：mass &#x3D;1.21257.83252.23729.7411   22.3220   36.4880   12.3838<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以对其他具有<strong>兼容大小</strong>的数组执行运算。例如：</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [1,2;3,4;5,6;7,8].*[1;2;3;4]结果：x &#x3D; 1     2 6     815    1828    32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong><br> * 运算符执行矩阵乘法。因此，如果使用 * 将两个大小相同的<strong>向量</strong>相乘，则会由于<strong>内部维度不一致</strong>而执行失败。</p>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-07：数据索引</title>
      <link href="/matlab-1-7/"/>
      <url>/matlab-1-7/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">输入：load datafilecolumdata结果：column &#x3D;   0.5300   1.7800   0.8600   1.6000   3.0000   6.1100   2.5400data &#x3D;3.0000    0.5300    4.0753       NaN   18.0000    1.7800    6.6678    2.1328   19.0000    0.8600    1.5177    3.6852   20.0000    1.6000    3.6375    8.5389   21.0000    3.0000    4.7243   10.1570   23.0000    6.1100    9.0698    2.8739   38.0000    2.5400    5.3002    4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一、普通索引"><a href="#一、普通索引" class="headerlink" title="一、普通索引"></a>一、普通索引</h1><h2 id="1-1-向量索引"><a href="#1-1-向量索引" class="headerlink" title="1.1 向量索引"></a>1.1 向量索引</h2><p>不管是行向量还是列向量，都只需要一个索引值。</p><h3 id="1-1-1-提取单个元素"><a href="#1-1-1-提取单个元素" class="headerlink" title="1.1.1 提取单个元素"></a>1.1.1 提取单个元素</h3><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; column(6)结果：x &#x3D;6.1100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 MATLAB 关键字 end 作为行或列索引来引用最后一个元素。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; column(end)结果：x &#x3D;2.5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取数组中的元素后，就可以修改它的值：</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; data(1,:)x(end) &#x3D; 0.5结果：x &#x3D;3.0000    0.5300    4.0753       NaNx &#x3D;3.0000    0.5300    4.0753       0.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-提取多个元素"><a href="#1-1-2-提取多个元素" class="headerlink" title="1.1.2 提取多个元素"></a>1.1.2 提取多个元素</h3><p>单个索引值范围可用于引用向量元素的<strong>子集</strong>。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; column(2:5)结果：x &#x3D;1.78000.86001.60003.0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引可以是非连续数字。</p><pre class="line-numbers language-none"><code class="language-none">输入：m &#x3D; [1 3 6]x &#x3D; column(m)结果：x &#x3D;0.53000.86006.1100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-矩阵索引"><a href="#1-2-矩阵索引" class="headerlink" title="1.2 矩阵索引"></a>1.2 矩阵索引</h2><h3 id="1-2-1-提取单个元素"><a href="#1-2-1-提取单个元素" class="headerlink" title="1.2.1 提取单个元素"></a>1.2.1 提取单个元素</h3><p>矩阵需要2个索引值，您可以使用行、列索引从数组中提取值。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; data(6,3)结果：y &#x3D;9.0698<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以将算术运算与关键字 end 结合使用：</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; data(end-1,end-1)结果：y &#x3D;9.0698<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对一个矩阵索引时只使用一个参数，它将按顺序从上到下遍历每列。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; data(8)输出：y &#x3D;0.5300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-提取多个元素"><a href="#1-2-2-提取多个元素" class="headerlink" title="1.2.2 提取多个元素"></a>1.2.2 提取多个元素</h3><p>用作索引时，冒号运算符（:）可指代该维度中的所有元素。创建一个包含 data 中第 2 列上所有元素的<strong>列向量</strong>：</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; data(:,2)结果：y &#x3D;0.53001.78000.86001.60003.00006.11002.5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冒号运算符（:）也可以引用某个值范围。创建一个包含 data 的最后两列所有元素的<strong>矩阵</strong>：</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; data(:,end-1:end)结果：y &#x3D;4.0753       NaN6.6678    2.13281.5177    3.68523.6375    8.53894.7243   10.15709.0698    2.87395.3002    4.4508<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、逻辑索引"><a href="#二、逻辑索引" class="headerlink" title="二、逻辑索引"></a>二、逻辑索引</h1><pre class="line-numbers language-none"><code class="language-none">输入：sample &#x3D; data(:,1);v &#x3D; data(:,3);结果：sample &#x3D;3.0000   18.0000   19.0000   20.0000   21.0000   23.0000   38.0000v &#x3D;   4.0753   6.6678   1.5177   3.6375   4.7243   9.0698   5.3002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关系运算符（例如 &gt;、&lt;、== 和 ~=）执行两个值之间的比较。相等或不相等比较的结果为 1 (true) 或 0 (false)。</p><pre class="line-numbers language-none"><code class="language-none">输入：test &#x3D; (pi&lt;4)结果：test &#x3D;（logical）   1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1-生成逻辑数组"><a href="#2-1-生成逻辑数组" class="headerlink" title="2.1 生成逻辑数组"></a>2.1 生成逻辑数组</h2><p>将某个向量或矩阵与单个标量值进行比较，结果是与原始数组相同大小的逻辑数组。</p><p>比如，测试向量 v 中是否有小于 4 的元素。</p><pre class="line-numbers language-none"><code class="language-none">输入：test &#x3D; (v &lt; 4)结果：test &#x3D;（7×1 logical array）   0   0   1   1   0   0   0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-使用逻辑数组提取元素"><a href="#2-2-使用逻辑数组提取元素" class="headerlink" title="2.2 使用逻辑数组提取元素"></a>2.2 使用逻辑数组提取元素</h2><p>可以使用逻辑数组作为数组索引，MATLAB 会提取索引为 true 的数组元素。比如，提取 v 中所有小于 4 的元素。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; v(v &lt; 4)结果：y &#x3D;   1.5177   3.6375<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用逻辑运算符“与（&amp;）”以及“或（|）”来组合逻辑提取。比如，获取 v 中介于 5 和 10 之间的值。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; v(v&gt;5 &amp; v&lt;10)结果：y &#x3D;6.66789.06985.3002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以对两个不同向量使用逻辑索引。比如，提取 sample 中与 v 中小于 4 的元素所在位置对应的元素。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; sample(v &lt; 4)结果：y &#x3D;1920<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-使用逻辑数组修改元素"><a href="#2-3-使用逻辑数组修改元素" class="headerlink" title="2.3 使用逻辑数组修改元素"></a>2.3 使用逻辑数组修改元素</h2><p>利用逻辑索引，可以在数组中对满足条件的元素重新赋值。比如，将 v 中所有小于 4 的元素都替换为 0。</p><pre class="line-numbers language-none"><code class="language-none">输入：v(v &lt; 4) &#x3D; 0结果：v &#x3D;   4.0753   6.667800   4.7243   9.0698   5.3002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、表索引"><a href="#三、表索引" class="headerlink" title="三、表索引"></a>三、表索引</h1><p>有时候我们要处理的数据，是表格数据。如下图所示：</p><p><img src="elements.png"></p><h2 id="3-1-提取行"><a href="#3-1-提取行" class="headerlink" title="3.1 提取行"></a>3.1 提取行</h2><p>要提取表变量的行，使用常规数组索引即可。比如，提取表的前3行：</p><pre class="line-numbers language-none"><code class="language-none">输入：top3 &#x3D; elements(1:3,:)结果：top3 &#x3D;（3×4 table）  Element      Density    Volume1    Volume2___________    _______    _______    _______&quot;Lithium&quot;       0.53      4.0753        NaN &quot;Argon&quot;         1.78      6.6678     2.1328 &quot;Potassium&quot;     0.86      1.5177     3.6852 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请注意：top3 也是一个表。如下图所示：</strong></p><p><img src="top3.png"></p><h2 id="3-2-提取列"><a href="#3-2-提取列" class="headerlink" title="3.2 提取列"></a>3.2 提取列</h2><p>要提取表变量的列，可以使用圆点表示法。比如，将 elements 表中 Density 一列的内容赋给名为 d 的列向量：</p><pre class="line-numbers language-none"><code class="language-none">输入：d &#x3D; elements.Density结果：d &#x3D;0.53001.78000.86001.60003.00006.11002.5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-产生新列"><a href="#3-3-产生新列" class="headerlink" title="3.3 产生新列"></a>3.3 产生新列</h2><p>如果您正在使用表，您可能希望将相关数据放在一起。您可以将计算结果赋给表，而不是创建单独的变量。</p><p>比如，将 elements.Density 的每个元素与 elements.Volume1 相乘（请使用 .*），将结果赋给 elements.Mass。</p><p>变量 elements.Mass 不存在，MATLAB 将在表中创建名为 Mass 的新变量。</p><pre class="line-numbers language-none"><code class="language-none">输入：elements.Mass &#x3D; elements.Density .* elements.Volume1结果：表新增了名为 Mass 的一列，值为 elements.Density 的每个元素与 elements.Volume1 的乘积<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="mass.png"></p><h2 id="3-4-排序"><a href="#3-4-排序" class="headerlink" title="3.4 排序"></a>3.4 排序</h2><p>通过在实时脚本的输出窗格，点击表可以与表进行交互。</p><p>例如，按质量，从小到大对表进行排序：</p><p><img src="massSort.png"></p><p>如果觉得对表的处理结果满意的话，可以通过工作区提示的代码来更新代码使更改永久化。</p><pre class="line-numbers language-none"><code class="language-none">输入：elements &#x3D; sortrows(elements,&#39;Mass&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-06：数据保存、加载与查看</title>
      <link href="/matlab-1-6/"/>
      <url>/matlab-1-6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据保存"><a href="#一、数据保存" class="headerlink" title="一、数据保存"></a>一、数据保存</h1><p>使用 save 命令可以将工作区中的1个或所有变量保存为 MATLAB 特定格式文件（.mat）中。</p><h2 id="1-1-保存1个变量"><a href="#1-1-保存1个变量" class="headerlink" title="1.1 保存1个变量"></a>1.1 保存1个变量</h2><p>仅将工作区中1个名为 x 的变量保存到名为 fileName.mat 的 MAT 文件中：</p><pre class="line-numbers language-none"><code class="language-none">save fileName x或save fileName.mat x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2-保存所有变量"><a href="#1-2-保存所有变量" class="headerlink" title="1.2 保存所有变量"></a>1.2 保存所有变量</h2><p>将工作区中所有变量保存到名为 fileName.mat 的 MAT 文件中：</p><pre class="line-numbers language-none"><code class="language-none">save fileName或save fileName.mat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="二、数据加载"><a href="#二、数据加载" class="headerlink" title="二、数据加载"></a>二、数据加载</h1><p>使用 load 命令可以从 MAT 文件中将1个或所有变量加载到工作区中。</p><h2 id="2-1-加载1个变量"><a href="#2-1-加载1个变量" class="headerlink" title="2.1 加载1个变量"></a>2.1 加载1个变量</h2><p>从文件 fileName.mat 中仅将1个名为 m 的变量加载到工作区中：</p><pre class="line-numbers language-none"><code class="language-none">load fileName m或load fileName.mat m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-2-加载所有变量"><a href="#2-2-加载所有变量" class="headerlink" title="2.2 加载所有变量"></a>2.2 加载所有变量</h2><p>从文件 fileName.mat 中将所有变量都加载到工作区中：</p><pre class="line-numbers language-none"><code class="language-none">load fileName或load fileName.mat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="三、数据查看"><a href="#三、数据查看" class="headerlink" title="三、数据查看"></a>三、数据查看</h1><p>对于新加载进工作区的数据，或是原本已经存在于工作区的数据，通过输入变量的名称，可以查看工作区中列出的任何变量的内容。</p><p>比如，显示变量 data 的完整的内容：</p><pre class="line-numbers language-none"><code class="language-none">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-05：数组、标量、向量与矩阵</title>
      <link href="/matlab-1-5/"/>
      <url>/matlab-1-5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h1><p>什么是数组？在 MATLAB 里面，所有的变量均为数组。</p><p>这意味着每个变量都可以包含多个元素，完美可以使用数组将相关数据存储在一个变量中。</p><p><img src="array.png"></p><p>更进一步，如上图所示，根据数组行数、列数的不同，可以将MATLAB中的数组，进一步细分为：</p><ul><li>标量</li><li>向量（行向量、列向量）</li><li>矩阵</li><li>等等。</li></ul><p>我们可以通过在方括号中填写多个数值，来创建数组。</p><h1 id="二、标量"><a href="#二、标量" class="headerlink" title="二、标量"></a>二、标量</h1><p>当只有单个数值的时候，它实际上是一个 1×1 数组，也即它包含 1 行 1 列。</p><p>此时不需要方括号，并且这样的数组我们一般称之为标量，</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 1结果：x &#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、向量"><a href="#三、向量" class="headerlink" title="三、向量"></a>三、向量</h1><h2 id="3-1-行向量"><a href="#3-1-行向量" class="headerlink" title="3.1 行向量"></a>3.1 行向量</h2><p>在方括号中，当所有数值之间用空格（ ）或逗号（,）进行分隔时，MATLAB 会将这些数值组合为一个行向量，行向量是一个包含一行多列的数组 (1×n)。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [1 2 3]或x &#x3D; [1,2,3]结果：x &#x3D; 1    2    3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'><strong>小结：一行中元素的分隔，既可以用空格（ ）也可以用逗号（,）。</strong></font></p><h2 id="3-2-列向量"><a href="#3-2-列向量" class="headerlink" title="3.2 列向量"></a>3.2 列向量</h2><p>在方括号中，当所有数值之间用分号（;）进行分隔时，MATLAB 会将这些数值组合为一个列向量，列向量是一个包含一列多行的数组 (n×1)。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [1;2;3]结果：x &#x3D; 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-创建等间距向量"><a href="#3-3-创建等间距向量" class="headerlink" title="3.3 创建等间距向量"></a>3.3 创建等间距向量</h2><p>对于长向量，输入单个数值是不实际的。创建等间距向量的替代便捷方法，就是使用冒号运算符（:）。</p><p>请注意，当您使用冒号运算符（:）时，不需要方括号。</p><h3 id="3-3-1-创建默认等间距向量"><a href="#3-3-1-创建默认等间距向量" class="headerlink" title="3.3.1 创建默认等间距向量"></a>3.3.1 创建默认等间距向量</h3><p>只需要指定“起始值”和“最终值”即可，默认间距为1。</p><pre class="line-numbers language-none"><code class="language-none">输入：y &#x3D; 1:4结果：y &#x3D; 1    2    3    4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-创建指定等间距向量"><a href="#3-3-2-创建指定等间距向量" class="headerlink" title="3.3.2 创建指定等间距向量"></a>3.3.2 创建指定等间距向量</h3><p>冒号运算符（:）使用默认的间距 1，但是我们也可以指定您自己的间距，如下所示。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 20:2:26结果：x &#x3D; 20    22    24    26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 1:0.5:4结果：x &#x3D; 1.0000    1.5000    2.0000    2.5000    3.0000    3.5000    4.0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-向量的转置"><a href="#3-4-向量的转置" class="headerlink" title="3.4 向量的转置"></a>3.4 向量的转置</h2><p>冒号运算符（:）创建的是行向量。使用转置运算符（’）可以将行向量转换为列向量。</p><h3 id="3-4-1-分布进行创建和转置"><a href="#3-4-1-分布进行创建和转置" class="headerlink" title="3.4.1 分布进行创建和转置"></a>3.4.1 分布进行创建和转置</h3><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 1:3;x &#x3D; x&#39;结果：x &#x3D; 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-2-一步完成创建和转置"><a href="#3-4-2-一步完成创建和转置" class="headerlink" title="3.4.2 一步完成创建和转置"></a>3.4.2 一步完成创建和转置</h3><p>您可以通过在一条命令中创建行向量并将其全部转置来创建列向量。注意此处使用圆括号来指定运算的顺序。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; (1:2:5)&#39;结果：x &#x3D; 135<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、矩阵"><a href="#四、矩阵" class="headerlink" title="四、矩阵"></a>四、矩阵</h1><p>可以组合使用空格和分号来创建一个矩阵，即包含多行多列的数组。输入矩阵时，必须逐行输入它们。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [1 2 3;4 5 6;7 8 9]或x &#x3D; [1,2,3;4,5,6;7,8,9]或x &#x3D; [1 2 3;4,5,6;7 8 9]结果：x &#x3D; 1    2    34    5    67    8    9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、方括号内运算"><a href="#五、方括号内运算" class="headerlink" title="五、方括号内运算"></a>五、方括号内运算</h1><p>在 MATLAB 中，可以在方括号内执行计算。</p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; [abs(-4) 4^2]结果：x &#x3D;  4    16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-04：变量与常量</title>
      <link href="/matlab-1-4/"/>
      <url>/matlab-1-4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><h2 id="1-1-变量命名规则"><a href="#1-1-变量命名规则" class="headerlink" title="1.1 变量命名规则"></a>1.1 变量命名规则</h2><ul><li>仅包含字母、数字和下划线</li><li>以字母开头</li><li>区分大小写</li></ul><h2 id="1-2-变量的类型"><a href="#1-2-变量的类型" class="headerlink" title="1.2 变量的类型"></a>1.2 变量的类型</h2><p>不同于其他高级编程语言，在 MATLAB 中不存在专门的变量类型。</p><p>当需要定义一个变量时，不用指定变量类型，直接写该变量的变量名即可。赋值符右侧可以是标量、向量、矩阵等等中任意一种类型的数据。</p><h2 id="1-3-变量的定义"><a href="#1-3-变量的定义" class="headerlink" title="1.3 变量的定义"></a>1.3 变量的定义</h2><p>一行语句中，如果单独只写一个变量名的话，意思是显示出该变量的值。</p><p>所以，定义变量时，必须要同时赋值。</p><h1 id="二、常量"><a href="#二、常量" class="headerlink" title="二、常量"></a>二、常量</h1><p>MATLAB 包含一些内置的常量。</p><h2 id="2-1-pi"><a href="#2-1-pi" class="headerlink" title="2.1 pi"></a>2.1 pi</h2><p>pi 表示 π。</p><p>举例：创建一个名为 x 的变量，其值为 π/2</p><pre class="line-numbers language-none"><code class="language-none">x &#x3D; pi&#x2F;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-03：快速体验</title>
      <link href="/matlab-1-3/"/>
      <url>/matlab-1-3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MATLAB桌面和编辑器"><a href="#一、MATLAB桌面和编辑器" class="headerlink" title="一、MATLAB桌面和编辑器"></a>一、MATLAB桌面和编辑器</h1><h2 id="1-1-MATLAB桌面和编辑器"><a href="#1-1-MATLAB桌面和编辑器" class="headerlink" title="1.1 MATLAB桌面和编辑器"></a>1.1 MATLAB桌面和编辑器</h2><p>要创建实时脚本，单击工具栏中的“New Live Script”即可</p><h2 id="1-2-MATLAB编辑器"><a href="#1-2-MATLAB编辑器" class="headerlink" title="1.2 MATLAB编辑器"></a>1.2 MATLAB编辑器</h2><p>当在实时编辑器中完成任务时，命令行窗口和工作区会最小化，仍可以通过点击它们的名称来访问它们。</p><h2 id="1-3-运行脚本"><a href="#1-3-运行脚本" class="headerlink" title="1.3 运行脚本"></a>1.3 运行脚本</h2><p>新增内容分为“文本”和“代码”两种，可以在脚本文件中自由切换。</p><p>编辑脚本文件时，主要用到图标：</p><ul><li>“分节符”：添加一个分节符，用来上下分节</li><li>“文本”：添加一行文本</li><li>“代码”：添加一行代码</li></ul><p>运行脚本文件时：</p><ul><li>“运行”：自上而下，运行整个脚本文件（所有节）</li><li>“运行节”：运行光标所在节</li><li>“运行并前进”：执行完光标所在节，并跳转到下一节</li></ul><h1 id="二、命令行"><a href="#二、命令行" class="headerlink" title="二、命令行"></a>二、命令行</h1><p>（1）执行运算时，如果不专门指定变量，MATLAB 会自动新建一个名为 ans 的变量用来存储计算结果。</p><p>（2）MATLAB 中的等号 (=) 是赋值运算符，MATLAB 会首先计算等号右侧的表达式，再赋给左侧的变量。</p><p>（3）工作区窗口中显示的是当前位于工作区中的所有变量。</p><p>（4）当输入命令而没有以分号结尾时，MATLAB 将会在命令提示符下显示结果；如果在命令的末尾添加以分号结尾，将抑制输出显示，但仍会执行该命令。</p><p>（5）在命令行窗口为活动窗口的前提下，按键盘上的向上箭头键可以重新调用以前的命令。</p><p>（6）MATLAB 不会在命令行窗口中自动重新运行以前的命令，所以以前的变量的值会保持不变。</p><p>（7）当要在 MATLAB 中切换处理新问题时，可以使用 clear 函数从工作区中删除所有变量。</p><pre class="line-numbers language-none"><code class="language-none">clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（8）清空命令行窗口。</p><pre class="line-numbers language-none"><code class="language-none">clc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、调整数据显示精度"><a href="#三、调整数据显示精度" class="headerlink" title="三、调整数据显示精度"></a>三、调整数据显示精度</h1><p>变量在命令行窗口、工作区窗口等里面，默认仅显示前四个小数位，但它在 MATLAB 内部是用更高的精度表示的，可以使用 format 函数控制显示的精度。</p><h2 id="3-1-提高显示精度"><a href="#3-1-提高显示精度" class="headerlink" title="3.1 提高显示精度"></a>3.1 提高显示精度</h2><pre class="line-numbers language-none"><code class="language-none">format long<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-降低（还原）显示精度"><a href="#3-2-降低（还原）显示精度" class="headerlink" title="3.2 降低（还原）显示精度"></a>3.2 降低（还原）显示精度</h2><pre class="line-numbers language-none"><code class="language-none">format short<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-02：环境安装</title>
      <link href="/matlab-1-2/"/>
      <url>/matlab-1-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB入门教程-01：目录</title>
      <link href="/matlab-1-1/"/>
      <url>/matlab-1-1/</url>
      
        <content type="html"><![CDATA[<p>本专题的目录安排如下：</p><ul><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-1/">MATLAB入门教程-01：目录</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-2/">MATLAB入门教程-02：环境安装</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-3/">MATLAB入门教程-03：快速体验</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-4/">MATLAB入门教程-04：变量与常量</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-5/">MATLAB入门教程-05：数组、标量、向量与矩阵</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-6/">MATLAB入门教程-06：数据保存、加载与查看</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-7/">MATLAB入门教程-07：数据索引</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-8/">MATLAB入门教程-08：数组运算</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-9/">MATLAB入门教程-09：函数</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-10/">MATLAB入门教程-10：编程</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-11/">MATLAB入门教程-11：绘制数据图、数据可视化</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/matlab-1-12/">MATLAB入门教程-12：项目</a><font color='red'>（更新中…）</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息与通信工程-03：双工方式FDD、TDD之间的区别</title>
      <link href="/info-and-comm-engi-3/"/>
      <url>/info-and-comm-engi-3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、双工方式"><a href="#一、双工方式" class="headerlink" title="一、双工方式"></a>一、双工方式</h1><p>双工方式中的“双”可以类比通话中的两个手机，“工”表示工作方式。双工方式分为半双工和全双工，全双工又分为时分双工和频分双工。电流在导体里某一时刻是单向传输的，手机发送的电磁波也一样，它在空气里的某一时刻也是单向传输的。</p><h2 id="1-1-半双工"><a href="#1-1-半双工" class="headerlink" title="1.1 半双工"></a>1.1 半双工</h2><p>半双工就像对讲机，小红说“完毕”，小黑说，小黑说“完毕”，小红说……，就是说通话双方轮流说话，这就叫“半”。</p><p>小红与小黑之间只有一个车道，“小红的话”出发，经过车道到达小黑后，“小黑的话”才出发，要不然就像过独木桥一样要撞车。</p><h2 id="1-2-全双工"><a href="#1-2-全双工" class="headerlink" title="1.2 全双工"></a>1.2 全双工</h2><p>全双工就像打电话，小红和小黑可以同时一起说，这就叫“全”。</p><ul><li><p><strong>FDD-频分双工</strong>：小红和小黑之间不是单车道了，而成了双车道，所以小红和小黑就可以同时说话了。</p></li><li><p><strong>TDD-时分双工</strong>：小红和小黑之间还是单车道，但“小红的话”和“小黑的话”不是车了，变成火箭了，它们轮流说话，但间隔非常非常小，耳朵感觉不到这个间断，所以仍然感觉是在同时通话。</p></li></ul><h1 id="二、多址vs双工"><a href="#二、多址vs双工" class="headerlink" title="二、多址vs双工"></a>二、多址vs双工</h1><p>不要混淆多址方式和双工方式。</p><ul><li><p><strong>多址方式</strong>：目的是让同一个房间里所有人都可以同时一起通话，而不是每时每刻只能一个用户。</p></li><li><p><strong>双工方式</strong>：目的是让一通电话两端的小红和小黑同时发言，而不是让小黑和小红轮流发言。</p></li></ul><h1 id="三、WCDMA-vs-TD-SCDMA"><a href="#三、WCDMA-vs-TD-SCDMA" class="headerlink" title="三、WCDMA vs TD-SCDMA"></a>三、WCDMA vs TD-SCDMA</h1><p>WCDMA和TD-SCDMA的共性是多址方式都用到了CDMA，最主要的区别是双工方式不同。</p><p>WCDMA是FDD（频分双工），TD-SCDMA是TDD（时分双工）。</p><h2 id="3-1-WCDMA"><a href="#3-1-WCDMA" class="headerlink" title="3.1 WCDMA"></a>3.1 WCDMA</h2><p><strong>中国联通</strong>用的是WCDMA，W表示宽带的意思，宽带就是占用更多车道的意思，双工方式是FDD（频分双工）。WCDMA中的“址”是频率F和扩频码字C共同决定的。</p><h2 id="3-2-TD-SCDMA"><a href="#3-2-TD-SCDMA" class="headerlink" title="3.2 TD-SCDMA"></a>3.2 TD-SCDMA</h2><p><strong>中国移动</strong>用的是TD-SCDMA，TD表示双工方式是TDD（时分双工），S表示同步，CDMA表示多址方式是码分多址。实际中TD-SCDMA中的“址”是由时间T、频率F和扩频码字C共同决定的。</p><p>此外，注意是TD-SCDMA，读的时候不要顿成TDS-CDMA。同步S过于复杂，入门者不必操心。</p>]]></content>
      
      
      <categories>
          
          <category> info and comm engi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information </tag>
            
            <tag> Communication </tag>
            
            <tag> 双工方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息与通信工程-02：多址方式FDMA、TDMA、CDMA之间的区别</title>
      <link href="/info-and-comm-engi-2/"/>
      <url>/info-and-comm-engi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、多址方式概述"><a href="#一、多址方式概述" class="headerlink" title="一、多址方式概述"></a>一、多址方式概述</h1><p>在无线通信系统中，多用户同时通过同一个基站和其他用户进行通信，必须对不同用户和基站发出的信号赋予不同特征。这些特征使基站从众多手机发射的信号中，区分出是哪一个用户的手机发出来的信号；各用户的手机能在基站发出的信号中，识别出哪一个是发给自己的信号。</p><p>在无线通信系统中，使用多址方式寻址。“多”表示多个用户可以同时通信；“址”指的是按照时间T、频率F和扩频码字C来共同区分的用户的地址。</p><p>比如同一个办公室里的小红和小黑可以同时打电话，之所以不是轮流打，是因为通信网络给同时打电话的小红和小黑都分配了不同的地址，这样接收手机信号的基站就能通过地址这个标识把小红和小黑区分出来了。如果没有多址方式，小红和小黑的信号的混在一起了分不开了。</p><p>常用的多址技术主要有：FDMA（频分多址）、TDMA（时分多址）、CDMA（码分多址）。其中，D表示分，M表示多，A表示址。从效果上看三种方式等价，这个效果就是同一办公室的人们都可以同时打电话。</p><h1 id="二、常用的多址技术"><a href="#二、常用的多址技术" class="headerlink" title="二、常用的多址技术"></a>二、常用的多址技术</h1><h2 id="2-1-FDMA-频分多址"><a href="#2-1-FDMA-频分多址" class="headerlink" title="2.1 FDMA-频分多址"></a>2.1 FDMA-频分多址</h2><p>FDMA（频分多址），将总频段划分为不同的小频道分配给不同的用户，让不同的用户占用不同频率的信道进行通信。因为各个用户使用着不同频率的信道，所以相互没有干扰。早期的移动通信就是采用这个技术。</p><p>优点：简单，易实现，技术成熟，对信号功率控制要求不高；<br>缺点：频率利用率低，容量小，基站需要多部不同载波频率发射机同时工作，容易造成同频干扰。</p><p><img src="FDMA.jpg"></p><p>FDMA（频分多址）就好比把聚会大厅分成一个个小房间，房间里面的双方可以很清楚的听到对方讲话，但是这种方式的缺点也很明显，就是房间数有限，能够容纳的客人太少了。</p><p>大家的手机在不同的频率上给基站同时发送信号，就像是各自在不同的车道上行驶，互不干扰。</p><p>FDMA（频分多址）的“址”就是分配给用户的不同频率。</p><h2 id="2-2-TDMA-时分多址"><a href="#2-2-TDMA-时分多址" class="headerlink" title="2.2 TDMA-时分多址"></a>2.2 TDMA-时分多址</h2><p>TDMA（时分多址），将时间段划分为小时隙，分配给不同的用户。这种多址技术是让多用户使用同一个信道，但是我们把一个载波在不同的时间上进行切片，分成不同的时隙给各个用户使用。由于占用的时间不同，所以相互之间不会干扰。显然，在相同信道数的情况下，TDMA要比FDMA能容纳更多的用户。</p><p>优点：容量大，频率利用率高；<br>缺点：技术复杂，严格的同步要求。</p><p>TDMA通信系统和FDMA通信系统相比具有以下主要特点：<br>（1）TDMA通信系统的基站只用一部发射机，可以避免FDMA通信系统多部不同频率发射机同时工作而产生的互调干扰；<br>（2）TDMA通信系统不存在频率分配问题，对时隙的管理和分配比对频率的管理和分配简单而经济；<br>（3）移动台只在指定的时隙中接收信息，有利于通信网络的控制和管理，可保证移动台的越区切换功能可靠的实现；<br>（4）可同时提供多种业务，使系统的通信容量和通信速率成倍地增长；<br>（5）TDMA通信系统具有精确的定时和同步功能，可保证各移动台发送的信号不会在基站发生重叠和混淆。</p><p><img src="TDMA.jpg"></p><p>TDMA（时分多址）就好比所有人都在同一个房间里，但是规定房间里的每个人只能连续讲10分钟的话，超过10分钟就要让给下一个人，等下次轮到你了，你再占用这个房间讲话。通过这种方式，可以有更多的人参加到聚会里来，只要间隔时间（例子中的10分钟）在可以忍受的范围内，那么就不会有什么问题；</p><p>大家的手机轮流给基站发送信号，但是轮流的非常非常快，每个手机发送的时间只占1秒的几十万分之一，再加上手机的一些信号处理，人耳感觉不到轮流中等待的那段时间，感觉就像连续通话一样。</p><p>TDMA（时分多址）的“址”就是轮流分得的发送时间。</p><h2 id="2-3-CDMA-码分多址"><a href="#2-3-CDMA-码分多址" class="headerlink" title="2.3 CDMA-码分多址"></a>2.3 CDMA-码分多址</h2><p>CDMA（码分多址），不同的用户采用各自独立的编码序列。也是多个用户使用同一个信道。但是每个用户都被分配有一个独特的“码序列”，与所有别的“码序列”都不相同且正交，所以各个用户相互之间也没有干扰。因为是靠不同的“码序列”来区分不同的用户，所以叫做“码分多址”。CDMA可以比TDMA容纳更多的用户。</p><p>优点：容量最大，频率利用率高，质量好。背景噪声受限的系统，软容量。<br>缺点：起步太晚，用户群体少。</p><p>CDMA系统的特点总结如下：<br>（1）容量大；<br>（2）软容量（背景噪音受限的系统）；<br>（3）软切换；<br>（4）话音激活技术，以提高系统的通信容量；<br>（5）CDMA蜂窝通信系统的功率控制；<br>（6）CDMA蜂窝系统以扩频技术为基础，因而它具有扩频通信系统所固有的优点（抗干扰、抗多径、隐蔽、保密和多址能力）。</p><p><img src="CDMA.jpg"></p><p>CDMA（码分多址）也是好比所有人都在同一个房间里。但是，你和张三说中国话，alice和bob说英文，cici和coco说意大利语，虽然大家都叽叽喳喳的说着话，但是你还是可以很清楚的听明白张三说的什么，因为你只能听懂中国话，听不懂英文和意大利语，就把其他语言当成噪音直接过滤掉了。</p><p>大家发送信号前，给自己的信号上加个扩频码字，基站接收到大家一起发来的信号后，通过扩频码字就能分辨出谁是小红、谁是小黑。扩频的意思的大大增加了传送的数据量，需要扩展车道，这是因为大家发送数据时给每个数据都额外加上了这个扩频码字，所以要用更宽的车道来传。</p><p>CDMA（码分多址）的“址”就是标识用户的扩频码字。</p><h2 id="2-4-实际应用"><a href="#2-4-实际应用" class="headerlink" title="2.4 实际应用"></a>2.4 实际应用</h2><p>在实际中，并不一定仅由时间T、频率F或扩频码字C中的一个因素就决定用户的地址，可能是一个或是多个因素一起决定。</p><p>就像小红在指定车道上开着贴着自己车牌（扩频码字）的车，这就叫FDMA-CDMA，这样混合的优点是能让系统容纳更多的用户。当然单一因素也是可以的，只是系统用户容量会小一些。</p>]]></content>
      
      
      <categories>
          
          <category> info and comm engi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information </tag>
            
            <tag> Communication </tag>
            
            <tag> 多址方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息与通信工程-01：目录</title>
      <link href="/info-and-comm-engi-1/"/>
      <url>/info-and-comm-engi-1/</url>
      
        <content type="html"><![CDATA[<p>本专题的目录安排如下：</p><ul><li>（点击链接-&gt;）<a href="https://oceanwang.top/info-and-comm-engi-1/">信息与通信工程-01：目录</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/info-and-comm-engi-2/">信息与通信工程-02：多址方式FDMA、TDMA、CDMA之间的区别</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/info-and-comm-engi-3/">信息与通信工程-03：双工方式FDD、TDD之间的区别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> info and comm engi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information </tag>
            
            <tag> Communication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template-01：目录</title>
      <link href="/template-1/"/>
      <url>/template-1/</url>
      
        <content type="html"><![CDATA[<center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center><p>&nbsp;</p><p>本专题的目录安排如下：</p><ul><li>（点击链接-&gt;）<a href="https://oceanwang.top/template-1/">template-01：目录</a></li></ul><p><img src="%E6%8B%BF%E7%A0%B4%E4%BB%91ZigBee.jpg"></p><center>    <font size=4>        【配套<font color='red'><strong>源码</strong></font>、<font color='red'><strong>文档</strong></font>、<font color='red'><strong>软件</strong></font>、<font color='red'><strong>硬件</strong></font>等资源，请移步技术交流群：<font color='red'><strong>拿破仑ZigBee</strong></font>（263671349）】    </font></center>]]></content>
      
      
      <categories>
          
          <category> template </category>
          
      </categories>
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-15：Hexo+GitHub Pages：多电脑多用户协同创作</title>
      <link href="/personal-website-15/"/>
      <url>/personal-website-15/</url>
      
        <content type="html"><![CDATA[<p>正在加紧更新中…</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-14：Hexo+GitHub Pages：GitHub Actions自动部署</title>
      <link href="/personal-website-14/"/>
      <url>/personal-website-14/</url>
      
        <content type="html"><![CDATA[<p>本文的前提是：必须已经在用GitHub对Hexo源码仓库进行管理了。</p><h1 id="一、本地生成SSH密钥对"><a href="#一、本地生成SSH密钥对" class="headerlink" title="一、本地生成SSH密钥对"></a>一、本地生成SSH密钥对</h1><p>在电脑上任意位置右击打开Git Bash窗口，输入如下指令并回车，创建SSH密钥对：<br>ssh-keygen -t rsa -C “<a href="mailto:&#x75;&#x73;&#x65;&#114;&#110;&#x61;&#109;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x75;&#x73;&#x65;&#114;&#110;&#x61;&#109;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>“<br><strong><em>（上面双引号需要替换为自己的GitHub注册邮箱账号。）</em></strong><br>为了简单起见，凡是窗口出现停顿需要输入信息的时候，默认直接回车即可，直到该指令完全执行完毕，如下图所示：<br><img src="1.png"><br>上图中框出的信息中指出了新生成的SSH密钥对所在位置，根据提示可以找到该位置，如下图所示：<br><img src="2.png"><br>可以看到该路径下总共有两个新生成的文件：</p><ul><li>id_rsa：里面保存的是<strong>私钥</strong>；</li><li>id_rsa.pub：里面保存的是<strong>公钥</strong>。</li></ul><h1 id="二、添加公钥"><a href="#二、添加公钥" class="headerlink" title="二、添加公钥"></a>二、添加公钥</h1><p>用Notepad++或记事本等文本编辑工具打开保存公钥的id_rsa.pub文件，如下图所示：<br><img src="3.png"><br>将里面所有内容直接全选，并复制到粘贴板中。</p><p>进入GitHub官网并登录后，点击网页右上角个人头像，在下拉选项中选择并点击“Settings”：<br><img src="4.png"><br>在接下来的网页左侧选择并点击“SSH and GPG keys”：<br><img src="5.png"><br>在接下来的网页右左侧点击“New SSH key”：<br><img src="6.png"><br>进入如下网页：<br><img src="7.png"></p><ul><li><strong>Title</strong>：这里的内容大家可以任意填写，后面也用不到；</li><li><strong>Key</strong>：在框内右击，将刚刚复制到粘贴板中的<strong>公钥</strong>粘贴进来；</li></ul><p>最后点击“Add SSH key”进行保存。保存成功后可以看到我们成功新增的这个SSH key：<br><img src="8.png"></p><h1 id="三、添加私钥"><a href="#三、添加私钥" class="headerlink" title="三、添加私钥"></a>三、添加私钥</h1><p>用Notepad++或记事本等文本编辑工具打开保存公钥的id_rsa文件，如下图所示：<br><img src="9.png"><br>将里面所有内容直接全选，并复制到粘贴板中。</p><p>在GitHub上面找到并进入我们保存Hexo源码目录的GitHub仓库：<br><img src="10.png"><br>然后依次点击“Settings”、“Secrets”和“New repository secret”，进入如下网页：<br><img src="11.png"></p><ul><li><strong>Name</strong>：这里的内容大家也是可以任意填写，但注意后面会需要用到；</li><li><strong>Value</strong>：在框内右击，将刚刚复制到粘贴板中的<strong>私钥</strong>粘贴进来；</li></ul><p>最后点击“Add secret”进行保存。保存成功后可以看到我们成功新增的这个secret：<br><img src="12.png"></p><h1 id="四、新增workflow文件"><a href="#四、新增workflow文件" class="headerlink" title="四、新增workflow文件"></a>四、新增workflow文件</h1><p>此时我们可以先去查看一下我们Hexo源码仓库的“Actions”，如下图所示：<br><img src="13.png"><br>从上图中可以看出，我们这个仓库还没有执行过任何的Actions。</p><p>我们进到电脑上本地的Hexo源码仓库，依次：</p><ul><li>在根目录下创建一个名为 <strong>.github</strong> 文件夹；</li><li>进入 <strong>.github</strong> 文件夹内，创建以一个名为 <strong>workflows</strong> 的文件夹；</li><li>进入 <strong>workflows</strong> 文件夹内，创建一个名为 <strong>.yml</strong> 后缀的文本文件（文件名可以任意取）；</li></ul><p>最后如下图所示：<br><img src="14.png"></p><p>这个.yml文件中的内容，大家可以参考我这里用的：<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>XXXXXXXXXXXXXXXX<br>大家可以整体直接复制过去用，也可以根据自己的需求进行修改。</p><h1 id="五、触发自动部署"><a href="#五、触发自动部署" class="headerlink" title="五、触发自动部署"></a>五、触发自动部署</h1><p>在Hexo源码仓库的根目录下，通过Git Bash依次执行如下指令<br>git add .<br>git commit -m “add deploy.yml for GitHub Actions”<br>git push</p><p>即可将我们刚刚新增的workflow文件上传到GitHub上去，GitHub上检测到workflow文件后，就会触发自动部署。<br><strong><em>（主要就是根据workflow文件中制定的流程去执行相应的操作。）</em></strong><br>稍等一会儿后刷新我们前面查看Hexo源码仓库Actions的网页，如下图所示：<br><img src="15.png"><br>这就表示我们这第一次自动部署就成功了！</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-13：Hexo+GitHub Pages：增加www域名解析</title>
      <link href="/personal-website-13/"/>
      <url>/personal-website-13/</url>
      
        <content type="html"><![CDATA[<p>我们在完成域名解析之后，已经可以成功访问域名了，但是发现如果在域名前面加上www前缀之后，竟然就不能访问了。<br>以我自己的域名为例：oceanwang.top是可以正常访问的，但是<a href="http://www.oceanwang.top却访问不了./">www.oceanwang.top却访问不了。</a><br><img src="1.png"></p><h1 id="一、添加域名解析记录"><a href="#一、添加域名解析记录" class="headerlink" title="一、添加域名解析记录"></a>一、添加域名解析记录</h1><p>解决这个问题其实很简单，只需要再增加一条针对于www的域名解析记录即可。<br>再次进入阿里云的控制台，进到关于域名解析的页面，如下图所示：<br><img src="2.png"><br>点击<strong>添加记录</strong>，进入如下图所示页面：<br><img src="3.png"></p><ul><li>记录类型：选择<strong>“CNAME- 将域名指向另一个域名”</strong>；</li><li>主机记录：填<strong>“www”</strong>；</li><li>记录值：填写自己的<strong>GitHub Pages的地址</strong>，我这里填的是<strong>“napoleon940911.github.io”</strong>；</li><li>其余：默认即可。</li></ul><p>最后点击<strong>确认</strong>，就可以看到又成功新增了一条解析记录。<br><img src="4.png"></p><h1 id="二、测试www域名"><a href="#二、测试www域名" class="headerlink" title="二、测试www域名"></a>二、测试www域名</h1><p>完成针对于www的域名解析记录添加后，我们可以打开浏览器，输入带www前缀的域名，比如我的是<strong><a href="http://www.oceanwang.top/">www.oceanwang.top</a></strong>，然后回车，如下图所示：<br><img src="5.png"></p><p>可见，我们已经可以成功访问带www前缀的域名了！并且和原先不带www前缀的域名看到的网页是一模一样的。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-12：Hexo+GitHub Pages：解析域名</title>
      <link href="/personal-website-12/"/>
      <url>/personal-website-12/</url>
      
        <content type="html"><![CDATA[<h1 id="一、购买域名"><a href="#一、购买域名" class="headerlink" title="一、购买域名"></a>一、购买域名</h1><h2 id="1-1-域名购买平台简介"><a href="#1-1-域名购买平台简介" class="headerlink" title="1.1 域名购买平台简介"></a>1.1 域名购买平台简介</h2><p>可以购买域名的平台有很多，下面简要介绍4个主流的域名购买平台。</p><h3 id="1-1-1-阿里云"><a href="#1-1-1-阿里云" class="headerlink" title="1.1.1 阿里云"></a>1.1.1 阿里云</h3><p>百度搜索“阿里云”或直接通过官网（<a href="https://www.aliyun.com/%EF%BC%89%E8%BF%9B%E5%85%A5%EF%BC%9A">https://www.aliyun.com/）进入：</a><br><img src="1.png"></p><h3 id="1-1-2-腾讯云"><a href="#1-1-2-腾讯云" class="headerlink" title="1.1.2 腾讯云"></a>1.1.2 腾讯云</h3><p>百度搜索“腾讯云”或直接通过官网（<a href="https://cloud.tencent.com/%EF%BC%89%E8%BF%9B%E5%85%A5%EF%BC%9A">https://cloud.tencent.com/）进入：</a><br><img src="2.png"></p><h3 id="1-1-3-百度云"><a href="#1-1-3-百度云" class="headerlink" title="1.1.3 百度云"></a>1.1.3 百度云</h3><p>百度搜索“百度云”或直接通过官网（<a href="https://cloud.baidu.com/%EF%BC%89%E8%BF%9B%E5%85%A5%EF%BC%9A">https://cloud.baidu.com/）进入：</a><br><img src="3.png"></p><h3 id="1-1-4-GoDaddy"><a href="#1-1-4-GoDaddy" class="headerlink" title="1.1.4 GoDaddy"></a>1.1.4 GoDaddy</h3><p>百度搜索“GoDaddy”或直接通过官网（<a href="https://sg.godaddy.com/zh%EF%BC%89%E8%BF%9B%E5%85%A5%EF%BC%9A">https://sg.godaddy.com/zh）进入：</a><br><img src="4.png"></p><h2 id="1-2-购买域名"><a href="#1-2-购买域名" class="headerlink" title="1.2 购买域名"></a>1.2 购买域名</h2><p>各个平台大家可以自由选择，这里以在阿里云购买域名为例做个详细说明。<br>通过点击前面介绍的阿里云官网指定位置，可以进入如下页面：<br><img src="5.png"><br>我们在上图中指定框中输入自己想要的域名，比如这里我输入“oceanwang”并回车：<br><img src="6.png"><br>进入到上如图所示的界面之后，可以看到有非常多不同后缀的域名可以选，最主流的当然是.com这种最常见的域名后缀，这里我选择最便宜的以.top为后缀的域名<strong>oceanwang.top</strong>。先点击“加入清单”，然后点击“立即结算”，进入下图所示页面：<br><img src="7.png"><br>依次选择上图所圈出的内容，最后点击“立即购买”。后续付款流程大家自主完成即可。</p><h1 id="二、测试域名"><a href="#二、测试域名" class="headerlink" title="二、测试域名"></a>二、测试域名</h1><p>前面买的这个域名（oceanwang.top）后面会用来解析和绑定。这边先尝试用浏览器去访问一下，看看当前是什么效果。测试结果如下图所示：<br><img src="8.png"><br>意料之中：“无法访问此网站”，说明这个域名当前还是无效的。</p><h1 id="三、将“域名”映射到“GitHub-Pages”（解析域名）"><a href="#三、将“域名”映射到“GitHub-Pages”（解析域名）" class="headerlink" title="三、将“域名”映射到“GitHub Pages”（解析域名）"></a>三、将“域名”映射到“GitHub Pages”（解析域名）</h1><p>由于我的域名是在<strong>阿里云</strong>买的，所以下面将以<strong>阿里云</strong> 为例，讲解如何解析域名。<br>进入阿里云官网（<a href="https://www.aliyun.com/%EF%BC%89%E5%B9%B6%E7%99%BB%E5%BD%95%EF%BC%9A">https://www.aliyun.com/）并登录：</a><br><img src="9.png"><br>点击官网首页右上角的<strong>控制台</strong>，进入如下页面：<br><img src="10.png"><br>依次点击上图中两个位置，进入“域名列表”的页面：<br><img src="11.png"><br>点击<strong>解析</strong>后，如下图所示：<br><img src="12.png"></p><p>点击<strong>添加记录</strong>后，如下图所示：<br><img src="13.png"></p><ul><li>记录类型：选择<strong>“CNAME- 将域名指向另一个域名”</strong>；</li><li>记录值：填写自己的<strong>GitHub Pages的地址</strong>，我这里填的是<strong>“napoleon940911.github.io”</strong>；</li><li>其余：默认即可。</li></ul><p>最后点击<strong>确认</strong>，就可以看到成功新增了一条解析记录。<br><img src="14.png"></p><p>其中的<strong>主机记录</strong>系统默认帮我们选择了**@**。</p><h1 id="四、再次测试域名"><a href="#四、再次测试域名" class="headerlink" title="四、再次测试域名"></a>四、再次测试域名</h1><p>添加解析记录完成后，重新去浏览器中访问<strong>oceanwang.top</strong>，发现网页内容变了，如下图所示：<br><img src="15.png"><br><strong><em>（如果网页内容还没有任何变化，不要着急，稍等一会儿再次刷新尝试即可）</em></strong><br>从上图中我们可以看出，通过我们刚刚的域名解析设置，oceanwang.top 这个域名已经映射到我们的GitHub Pages上了。但是，还没有完全成功，还需要一些其他的操作。</p><h1 id="五、将“GitHub-Pages”映射到“域名”"><a href="#五、将“GitHub-Pages”映射到“域名”" class="headerlink" title="五、将“GitHub Pages”映射到“域名”"></a>五、将“GitHub Pages”映射到“域名”</h1><p>其实前面相当于是完成了<strong>域名</strong>到<strong>GitHub Pages</strong>的映射，接下来还需要完成 <strong>GitHub Pages</strong>到<strong>域名</strong>的映射。</p><p>进入到本地<strong>Hexo源码目录</strong>，找到<strong>source</strong>文件夹并进入，在该目录下创建一个 <strong>名为CNAME但无后缀的文件</strong>，如下图所示：<br><img src="16.png"></p><p>用Notepad++记事本等文本编辑工具打开<strong>CNAME</strong>文件，加入我们的域名<strong>oceanwang.top</strong>，如下图所示：<br><img src="17.png"></p><p>保存并退出。</p><h1 id="六、重新部署网站"><a href="#六、重新部署网站" class="headerlink" title="六、重新部署网站"></a>六、重新部署网站</h1><p>回到本地<strong>Hexo源码目录</strong>下，在空白处右击选择<strong>Git Bash Here</strong>，打开Git Bash窗口，依次执行如下3条指令，完成网站的部署：<br>hexo clean<br>hexo generate<br>hexo deploy<br>这个操作我们前面已经讲述过很多次了，这里就不再重复了。</p><p>此时，我们再去查看我们部署仓库（<a href="https://github.com/Napoleon940911/Napoleon940911.github.io%EF%BC%89%E7%9A%84settings%E4%B8%AD%E5%85%B3%E4%BA%8EGitHub">https://github.com/Napoleon940911/Napoleon940911.github.io）的settings中关于GitHub</a> Pages的描述，可以看到这里也有提示：**Your site is published at <a href="https://oceanwang.top/">https://oceanwang.top/</a> **，如下图所示。<br><img src="18.png"></p><h1 id="七、最后测试域名"><a href="#七、最后测试域名" class="headerlink" title="七、最后测试域名"></a>七、最后测试域名</h1><p>最后，我们再次重新去浏览器中访问<strong>oceanwang.top</strong>，可以发现成功变成了我们<strong>napoleon940911.github.io</strong>网址对应的内容了！<br><img src="19.png"><br><strong><em>（如果网页内容还没有任何变化，不要着急，稍等一会儿再次刷新尝试即可）</em></strong></p><p>至此，我们的<strong>域名解析</strong>工作就完成了，以后大家就可以通过自己的域名来访问自己的 <strong>个人博客网站</strong>了~</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-11：Hexo+GitHub Pages：日常写作与网站部署</title>
      <link href="/personal-website-11/"/>
      <url>/personal-website-11/</url>
      
        <content type="html"><![CDATA[<h1 id="一、静态网页来源解析"><a href="#一、静态网页来源解析" class="headerlink" title="一、静态网页来源解析"></a>一、静态网页来源解析</h1><p>一般来说，我们新增用来生成静态网页的资源都是放在Hexo源码目录下的source/_posts目录下的。<br>进入该目录之后，我们可以看到有一个hello-world.md文件：<br><img src="1.png"></p><p>通过Notepad++等文本编辑器打开可以看到里面的内容：<br><img src="2.png"><br>这就是我们前面在浏览器里面看到的网页的markdown源码。</p><p>很容易理解，我们只要将编写好的Markdown文件拷贝到source/_posts目录下，或是直接在该目录下编写Markdown文件，之后就可以生成相应的静态网页了。</p><h1 id="二、编写Markdown文件"><a href="#二、编写Markdown文件" class="headerlink" title="二、编写Markdown文件"></a>二、编写Markdown文件</h1><p>简单起见，这里我就直接在source/_posts目录下新建一个文本文件，然后重命名为<strong>。md文件</strong>。如下图所示：<br><img src="3.png"></p><p>通过Notepad++等文本编辑器打开后，按照Markdown语法，参考已有的hello-world.md文件内容的格式，增加如下文本内容：<br><img src="4.png"><br>保存并退出。</p><h1 id="三、本地预览"><a href="#三、本地预览" class="headerlink" title="三、本地预览"></a>三、本地预览</h1><p>一般来说，我们一篇文章写完之后，在进行远程部署之前，都建议先在本地预览一下，看一下显示效果是否符合我们的预期。这里我们输入如下指令并回车，进行本地预览：<br>hexo server -o<br>很快就会有一个默认浏览器的窗口自动弹出，上面就显示了我们整个个人博客网站的预览效果：<br><img src="5.png"></p><p>大家可以浏览并检查一下。</p><h1 id="四、网站部署"><a href="#四、网站部署" class="headerlink" title="四、网站部署"></a>四、网站部署</h1><p>新写的文章本地预览完成，觉得没问题了之后，就可以通过依次执行如下两条指令，将基于本地的Hexo源码目录生成静态网页并部署到GitHub Pages上了：<br>hexo generate<br>hexo deploy</p><p>这部分内容以及后续访问测试GitHub Pages等，前面文章中已经详细介绍过，这里就不再重复了。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-10：Hexo+GitHub Pages：更换Hexo主题（submodule方式）</title>
      <link href="/personal-website-10/"/>
      <url>/personal-website-10/</url>
      
        <content type="html"><![CDATA[<p>前面《09-搭建个人博客网站：Hexo+GitHub Pages入门：更换Hexo主题（简单方式）》一文中，用最简单的方式介绍了一下如何更换主题。这样操作起来短期之类看确实挺简单的，但是长远来看会带了一个问题：</p><p>主题作者如果有了更新（可能是新增功能，也可能是修复bug等等）</p><p>仅仅是“下载主题”这一步升级了一下，其余所有步骤保持不变。</p><h1 id="一、新建GitHub仓库"><a href="#一、新建GitHub仓库" class="headerlink" title="一、新建GitHub仓库"></a>一、新建GitHub仓库</h1><p>删除刚刚下载在themes目录下的hexo-theme-matery文件夹<br><img src="1.png"></p><p>fork 原作者的主题仓库<br><img src="2.png"><br><img src="3.png"></p><p>获取新fork的仓库地址<br><img src="4.png"></p><p>git submodule add <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:Napoleon940911/hexo-theme-matery.git themes/hexo-theme-matery<br><img src="5.png"></p><p>新增了一个文件夹<br><img src="6.png"></p><p>新增了一个文件<br><img src="7.png"></p><p>文件内容<br><img src="8.png"></p><p>查看当前Hexo源码目录的变动情况<br><img src="9.png"></p><p>git commit -m “add submodule: themes/hexo-theme-matery”<br>git add _config.yml<br>git commit -m “changes theme from landscape to hexo-theme-matery”<br>git push</p><p>进行本地预览和网站部署，效果和之前是一模一样的。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-09：Hexo+GitHub Pages：更换Hexo主题（简单方式）</title>
      <link href="/personal-website-9/"/>
      <url>/personal-website-9/</url>
      
        <content type="html"><![CDATA[<p>既然已经搭建好了我们的个人网站，接下来就可以做点稍微有意思点的事情了。比如：给我们的个人博客网站换个主题！</p><p>最开始我们在通过**hexo init &lt;hexo源码文件夹&gt;**指令创建Hexo源码文件夹的时候，默认下载的主题是 landscape，如下图所示：<br><img src="1.png"></p><p>我们也不能说它丑，其实还看得过去，毕竟是官方默认的，姑且称之为经典吧。但是，确实不是很好看。好了，下面开始正题。</p><h1 id="一、挑选主题"><a href="#一、挑选主题" class="headerlink" title="一、挑选主题"></a>一、挑选主题</h1><p>官方地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="2.png"></p><p>从上图中可以看到，截止至本篇博文发布之时，官方总共提供了330个主题供大家选择。</p><p>如果要说有没有什么选择的原则，应该是没有的吧，关键是要自己看着喜欢，最好是一见钟情的那种，毕竟它将会作为你个人网站的的主题，代表你个人的风格，很可能成为别人对你的第一印象。</p><p>做为一个严重强迫症患者，我硬是把官网提供的330个主题全部点开看了一遍，花了几个小时经过好几轮筛选，才最终选定！非常不值得大家借鉴！大家选的自己看着开心就好~</p><h1 id="二、下载主题"><a href="#二、下载主题" class="headerlink" title="二、下载主题"></a>二、下载主题</h1><p>我最终选定的是下面这个名为Matery的主题：<br><img src="3.png"></p><p>选定主题后，点击图片，可以直接进入该主题作者基于该主题已经开发好了的个人网站：<a href="https://blinkfox.github.io/">https://blinkfox.github.io/</a><br>如下图所示：<br><img src="4.png"></p><p>点击上一幅图上蓝色加粗的<strong>Matery</strong>，可以进入该主题的源码仓库：<a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">https://github.com/blinkfox/hexo-theme-matery，如下图所示：</a><br><img src="5.png"></p><p>依此点击上图中的红色圈出的部分，便可获得该主题仓库的下载链接至剪切板。</p><p>回到我们本地的Hexo源码目录，进入根目录下的themes目录，在空白处右击打开Git Bash窗口，输入如下指令并回车以开始下载我们选定的主题：<br>git clone <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:blinkfox/hexo-theme-matery.git<br><strong><em>大家需要将指令中的链接替换成自己选中的主题的下载链接</em></strong></p><p>该主题下载完成后，Git Bash窗口中如下图所示：<br><img src="6.png"></p><p>与此同时可以看到themes目录下多出来了一个hexo-theme-matery的文件夹：<br><img src="7.png"><br>这里面就是我们新下载的主题的所有源码。</p><h1 id="三、更改主题配置"><a href="#三、更改主题配置" class="headerlink" title="三、更改主题配置"></a>三、更改主题配置</h1><p>回到Hexo源码目录的根目录下，找到站点配置文件<strong>_config.yml</strong>，用Notepad++或记事本 等文本编辑工具打开，找到主题配置部分，如下图所示：<br><img src="8.png"></p><p>将上图中原来的主题名称<strong>landscape</strong>，直接改为我们刚刚下载下来的主题所在的文件夹名称<strong>hexo-theme-matery</strong>（这里其实也可以改为 matery，但也必须将主题所在文件夹的名称也改为 matery，保持一致即可）。如下图所示：<br><img src="9.png"></p><p>保存并退出。</p><h1 id="四、本地预览"><a href="#四、本地预览" class="headerlink" title="四、本地预览"></a>四、本地预览</h1><p>主题更改完成之后，我们可以先在本地预览一下效果怎么样。</p><p>回到Hexo源码目录的根目录下，打开Git Bash窗口输入如下指令并回车，进行本地预览：<br>hexo server -o</p><p>在弹出的浏览器窗口中，我们可以看到更改了主题之后我们个人博客网站全新的主题效果：<br><img src="10.png"></p><p>仔细看发现主页还会变色，哈哈~<br>页面向下滚动，效果如下图所示：<br><img src="11.png"></p><h1 id="五、网站部署"><a href="#五、网站部署" class="headerlink" title="五、网站部署"></a>五、网站部署</h1><p>完成预览后，后续大家就可以生成静态网页并进行网站部署了。</p><p>这部分内容以及后续访问测试GitHub Pages等，前面文章中已经详细介绍过，这里就不再重复了。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-08：Hexo+GitHub Pages：用Git管理Hexo源码</title>
      <link href="/personal-website-8/"/>
      <url>/personal-website-8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、新建GitHub仓库"><a href="#一、新建GitHub仓库" class="headerlink" title="一、新建GitHub仓库"></a>一、新建GitHub仓库</h1><p>这里新建GitHub仓库的步骤，大体上跟之前是一样的，相同的部分这里就不再重复。只是做几点提示：</p><ul><li>这里的仓库命名没有任何限制，大家根据个人喜好自由命名即可；</li><li>稍后我们要将本地的Hexo源码目录同步到GitHub上来，建议不要勾选添加README等任何文件。</li></ul><p>这里我为了和前面创建的本地Hexo源码文件夹名称保持一致，将该仓库取名为：Napoleon940911-Hexo。新建好的仓库如下图所示：<br><img src="1.png"></p><h1 id="二、将本地Hexo源码目录同步到远程GitHub仓库"><a href="#二、将本地Hexo源码目录同步到远程GitHub仓库" class="headerlink" title="二、将本地Hexo源码目录同步到远程GitHub仓库"></a>二、将本地Hexo源码目录同步到远程GitHub仓库</h1><p>回到本地Hexo源码目录下，在Git Bash窗口中依次执行如下6条Git指令，将本地Hexo源码目录同步到远程GitHub仓库，<br>git init<br>git add .<br>git commit -m “first commit”<br>git branch -M main<br>git remote add origin <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;</a>:Napoleon940911/Napoleon940911-Hexo.git<br>git push -u origin main</p><p>执行完成后，Git Bash窗口如下图所示：<br><img src="2.png"></p><p>此时Hexo源码目录下多了一个.git的文件夹：<br><img src="3.png"><br><strong><em>（需要使能Windows显示“隐藏的项目”才能看得到）</em></strong><br>表示该Hexo源码目录已经变成了一个Git仓库。</p><p>此时去刷新一下我们刚刚新建的GitHub仓库所在的网页，可以看到本地Hexo源码目录已经完全同步到远程的GitHub仓库了：<br><img src="4.png"></p><p>以后大家就可以使用Git对Hexo源码目录进行高效的管理了。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-07：Hexo+GitHub Pages：将网站部署到GitHub Pages上</title>
      <link href="/personal-website-7/"/>
      <url>/personal-website-7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、注册GitHub账号"><a href="#一、注册GitHub账号" class="headerlink" title="一、注册GitHub账号"></a>一、注册GitHub账号</h1><p>后面要将我们的个人博客网站部署到GitHub Pages上，拥有一个GitHub账户自然就是最基本的前提了。</p><p>百度搜索“gitub”，搜索结果如下图所示：<br><img src="1.png"><br>选择并点击“GitHub Build software better, together.”，或直接访问<a href="https://github.com/">https://github.com/</a><br>进入如下图所示界面：<br><img src="2.png"></p><ul><li>如果是第一次使用GitHub，点击“Sign up”进行注册；</li><li>如果以前使用过GitHub，点击“Sign in”登录即可。</li></ul><h1 id="二、创建部署目录仓库"><a href="#二、创建部署目录仓库" class="headerlink" title="二、创建部署目录仓库"></a>二、创建部署目录仓库</h1><p>按照官方说明的使用规则，如果使用GitHub Pages进行网站部署的话，所建仓库必须要取名为“GitHub用户名.github.io”。因为我的GitHub用户名为Napoleon940911，所以我的这个仓库应取名为“Napoleon940911.github.io”。</p><p>在GitHub官网（<a href="https://github.com/%EF%BC%89%E4%B8%8A%E6%88%90%E5%8A%9F%E7%99%BB%E5%BD%95%E5%90%8E%EF%BC%8C%E6%89%BE%E5%88%B0%E5%B9%B6%E7%82%B9%E5%87%BB%E7%BD%91%E9%A1%B5%E5%B7%A6%E4%B8%8A%E6%96%B9%E7%9A%84%E2%80%9CNew%E2%80%9D%EF%BC%9A">https://github.com/）上成功登录后，找到并点击网页左上方的“New”：</a><br><img src="3.png"><br>从而进入如下网页：<br><img src="4.png"><br>依次：</p><ul><li>在上图所示的“Repository name”方框中填入仓库名称；</li><li>勾选“Add a README file”；</li><li>点击“Create repository”。<br>即可完成该仓库的创建（简单起见，其余所有内容均保持默认）。</li></ul><p><strong><em>注意：一定要勾选“Add a README file”，不然后面会看不到GitHub Pages的域名和部署分支</em></strong></p><h1 id="三、访问GitHub-Pages"><a href="#三、访问GitHub-Pages" class="headerlink" title="三、访问GitHub Pages"></a>三、访问GitHub Pages</h1><p>该仓库创建成功后，会进入如下图所示网页：<br><img src="5.png"></p><p>点击上图中的“Settings”，将所进入的网页滚轮移动至GitHub Pages相关的部分，如下图所示：<br><img src="6.png"><br>从上图中可以看出，GitHub Pages给我们提供了一个格式为<a href="https://github用户名.github.io/">https://GitHub用户名.github.io</a> 的免费域名，并且相应的网站是从该仓库的 main 分支构建得到的。</p><p>我们直接点击上图中的这个域名，或是将这个域名（<a href="https://napoleon940911.github.io/%EF%BC%89%E8%BE%93%E5%85%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%B9%B6%E5%9B%9E%E8%BD%A6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E7%95%8C%E9%9D%A2%EF%BC%9A">https://napoleon940911.github.io/）输入浏览器的地址栏并回车，可以看到如下图所示的界面：</a><br><img src="7.png"><br>如果你成功看到上图这样的界面，那么恭喜你已经拥有一个自己专属的网站了！！！</p><h1 id="四、设置部署仓库和分支"><a href="#四、设置部署仓库和分支" class="headerlink" title="四、设置部署仓库和分支"></a>四、设置部署仓库和分支</h1><p>回到我们前面创建的Hexo源码目录，用Notepad++或记事本等文本编辑工具打开根目录下面的 _config.yml 文件，并滚动到文件最后，可以看到如下图所示内容：<br><img src="8.png"></p><p>将上图中这部分的内容更改为如下图所示：<br><img src="9.png"></p><p>关于上图中“repo”内容的获取，如下图所示：<br><img src="10.png"><br>依次点击上图中3个圈出的位置，即可将我们需要的信息添加到<strong>剪切板</strong> 里面，直接粘贴到前面提到的 _config.yml 文件中最后的**repo:**后面即可。</p><p>关于branch的填写，必须要和<a href="https://github.com/Napoleon940911/Napoleon940911.github.io/settings">https://github.com/Napoleon940911/Napoleon940911.github.io/settings</a> 中GitHub Pages部分指定的<strong>Branch</strong>保持一致。<br>保存_config.yml文件，并退出。</p><h1 id="五、生成静态网页文件"><a href="#五、生成静态网页文件" class="headerlink" title="五、生成静态网页文件"></a>五、生成静态网页文件</h1><p>在Git Bash窗口中输入如下指令并回车，将Hexo源码目录中已有的源码编译生成为静态网页文件：<br>hexo generate<br>该指令执行完成后，如下图所示：<br><img src="11.png"></p><p>与此同时，可以看到Hexo源码目录中新增了一个名为db.json的文件，以及一个名为public的文件夹，如下图所示。<br><img src="12.png"></p><ul><li>db.json文件：编译过程中产生的中间文件，不用关心；</li><li>public文件夹：新生成的静态网页文件就存放在这个目录下。</li></ul><p>点进public文件夹可以看到：<br><img src="13.png"><br>这些就是刚刚编译生成的静态网页文件。</p><h1 id="六、部署到GitHub-Pages上"><a href="#六、部署到GitHub-Pages上" class="headerlink" title="六、部署到GitHub Pages上"></a>六、部署到GitHub Pages上</h1><p>在Git Bash窗口中输入如下指令并回车，将刚刚新生产的静态网页文件推送到GitHub Pages：<br>hexo deploy<br>该指令执行完成后，如下图所示：<br><img src="14.png"><br>上图中最后一行提示 Deploy done，意味着我们部署成功了！</p><h1 id="七、再次访问GitHub-Pages"><a href="#七、再次访问GitHub-Pages" class="headerlink" title="七、再次访问GitHub Pages"></a>七、再次访问GitHub Pages</h1><p>这时，我们再去访问我们前面得到的 GitHub Pages（<a href="https://napoleon940911.github.io/%EF%BC%89">https://napoleon940911.github.io/）</a> 。会发现原来几乎空白的网页，已经变成了前面我们在本地通过 <a href="http://localhost:4000/">http://localhost:4000</a> 所访问到的网页了！如下图所示：<br><img src="15.png"></p><p>如果测试发现 GitHub Pages 还是没有任何变化，不要着急，等几分钟之后再次刷新即可。</p><p>至此，我们就已经成功将本地的 Hexo 仓库部署到 GitHub 上了。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-06：Hexo+GitHub Pages：搭建局部环境+运行验证</title>
      <link href="/personal-website-6/"/>
      <url>/personal-website-6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、创建Hexo源码文件夹"><a href="#一、创建Hexo源码文件夹" class="headerlink" title="一、创建Hexo源码文件夹"></a>一、创建Hexo源码文件夹</h1><p>在确保完成了Git、Node.js、Hexo等软件环境的安装之后，我们需要通过如下格式的指令来创建hexo源码文件夹，用于存放个人网站博客的所有源码文件：<br>hexo init &lt;hexo源码文件夹&gt;</p><p>这里为了和将来要部署到GitHub Pages上的站点GitHub仓库名保持一致，故我这里将&lt;hexo源码文件夹&gt;命名为&lt;GitHub用户名.github.io&gt;，我的GitHub用户名为Napoleon940911，所以我这边需要输入的完整指令为：<br>hexo init Napoleon940911.github.io</p><p><strong><em>（这里的&lt;hexo源码文件夹&gt;大家其实可以自由命名，不一定非要按我这种命名方式）</em></strong></p><p>我们需要在电脑上选择一个合适的位置，来创建这个hexo源码文件夹，大家根据自己的实际情况选择即可。这里我选择的是如下目录：<br><img src="1.png"></p><p>在如下目录中的空白处打开鼠标右键，选择“Git Bash Here”，输入如下指令并回车进行创建：<br>hexo init Napoleon940911.github.io<br>命令执行结束后，Git Bash窗口内容如下图所示：<br><img src="2.png"><br>表示hexo源码文件夹创建成功了。同时电脑上相应的目录下会多出一个刚刚新建的文件夹，如下图所示：<br><img src="3.png"></p><h1 id="二、进入这个文件夹"><a href="#二、进入这个文件夹" class="headerlink" title="二、进入这个文件夹"></a>二、进入这个文件夹</h1><p>创建hexo源码文件夹完成后，进入新建的这个文件夹后可以看到里面默认已经有如下一些文件和文件夹了：<br><img src="4.png"></p><p>同样，我们需要在Git Bash窗口中输入如下指令并回车进入到该目录下，才能进行后续操作：<br>cd &lt;hexo源码文件夹&gt;<br>cd Napoleon940911.github.io<br><img src="5.png"></p><h1 id="三、安装项目所需的依赖项"><a href="#三、安装项目所需的依赖项" class="headerlink" title="三、安装项目所需的依赖项"></a>三、安装项目所需的依赖项</h1><p>进入hexo源码文件夹后，需要通过输入如下指令来安装项目所需的依赖项：<br>npm install<br><img src="6.png"><br>安装完成后，会得到如上图所示的内容。</p><h1 id="四、安装一键部署插件"><a href="#四、安装一键部署插件" class="headerlink" title="四、安装一键部署插件"></a>四、安装一键部署插件</h1><p>后面需要将我们的个人博客网站部署到诸如GitHub Pages这样的地方，必须安装hexo的部署插件hexo-deployer-git才可以实现。在Git Bash窗口中输入如下指令并回车：<br>npm install hexo-deployer-git –save<br><img src="7.png"><br>安装完成后，会得到如上图所示的内容。</p><h1 id="五、运行验证"><a href="#五、运行验证" class="headerlink" title="五、运行验证"></a>五、运行验证</h1><h2 id="5-1-启动Hexo服务器"><a href="#5-1-启动Hexo服务器" class="headerlink" title="5.1 启动Hexo服务器"></a>5.1 启动Hexo服务器</h2><p>上面的步骤全部完成后，博客的局部环境就搭建完毕了。但是最终成功与否，还是需要来实际运行验证一下看看。<br>这里我们在Git Bash窗口中输入如下指令并回车：<br>hexo server -o</p><p>如果出现如下图所示的警告窗口，点击“允许访问”即可：<br><img src="8.png"></p><p>耐心地等待一会儿之后，我们会看到如下图所示的界面：<br><img src="9.png"></p><p>上图中主要说明了2点信息：</p><ul><li>我们的个人博客网站的允许地址为<a href="http://localhost:4000；">http://localhost:4000；</a></li><li>如果我们要停止运行，按下Ctrl+C即可。</li></ul><p><strong><em>（如果出现类似上图中框出的Warning信息，忽略即可，不用关心）</em></strong></p><p>与此同时，我们会看到电脑的默认浏览器会自动弹出一个网页，浏览器中的地址就是上面提示的<a href="http://localhost:4000，网页上运行的就是我们刚刚搭建的个人博客网站。详情如下图所示：">http://localhost:4000，网页上运行的就是我们刚刚搭建的个人博客网站。详情如下图所示：</a><br><img src="10.png"></p><h2 id="5-2-停止Hexo服务器"><a href="#5-2-停止Hexo服务器" class="headerlink" title="5.2 停止Hexo服务器"></a>5.2 停止Hexo服务器</h2><p>当我们在Git Bash窗口中按下Crtl+C后，将会让服务器停止运行。如下图所示：<br><img src="11.png"><br>得到一串类似“Have a nice day”的字符提示。</p><p>此时若是刷新刚刚的网页，自然也是显示不出来了。重新启动 Hexo 服务器之后，我们将又可以进入刚刚的网页了。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-05：Hexo+GitHub Pages：搭建全局环境</title>
      <link href="/personal-website-5/"/>
      <url>/personal-website-5/</url>
      
        <content type="html"><![CDATA[<p><strong><em>（注：此处仅以Windows系统下的安装为例）</em></strong></p><h1 id="一、安装Git环境"><a href="#一、安装Git环境" class="headerlink" title="一、安装Git环境"></a>一、安装Git环境</h1><h2 id="1-1-获取Git安装包"><a href="#1-1-获取Git安装包" class="headerlink" title="1.1 获取Git安装包"></a>1.1 获取Git安装包</h2><p>百度搜索“git”，搜索结果如下图所示：<br><img src="git/1.png"><br>选择并点击“git官网”，或直接访问<a href="https://git-scm.com/">https://git-scm.com/</a><br>进入如下图所示界面：<br><img src="git/2.png"><br>点击“Download 2.30.0 for Windows”，进入如下图所示界面：<br><img src="git/3.png"><br>正常情况下，浏览器会自动弹出git安装文件的下载窗口，直接下载即可。<br>如果没有自动弹出弹窗，则点击“64-bit Git for Windows Setup”手动进行下载。</p><p>如果下载速度很慢的话，大家也可以通过本文文首或者文末的百度网盘链接进行下载~</p><p><strong><em>（注：截止至本文发布时，最新版本的Git软件为“Git-2.30.0.2-64-bit.exe”，所以网盘中分享的也是这个版本）</em></strong></p><p>下载完成后，会得到如下图所示这样的一个文件：<br><img src="git/4.png"></p><h2 id="1-2-安装Git-Windows客户端"><a href="#1-2-安装Git-Windows客户端" class="headerlink" title="1.2 安装Git Windows客户端"></a>1.2 安装Git Windows客户端</h2><p>双击运行上图所示的安装文件，弹出窗口如下图所示：<br><img src="git/5.png"></p><p>接下来的安装步骤很简单，如果没有特殊需求的话，按照提示一路默认操作即可。直至弹出如下图所示的窗口：<br><img src="git/6.png"></p><h2 id="1-3-检查Git环境"><a href="#1-3-检查Git环境" class="headerlink" title="1.3 检查Git环境"></a>1.3 检查Git环境</h2><p>Git软件安装完成后，在电脑上任意位置，鼠标右键单击，可以看到比之前多出来了“Git GUI Here”和“Git Bash Here”两个选项，如下图所示：<br><img src="git/7.png"></p><p>这里我们单击选择“Git Bash Here”，Git Bash窗口会自动弹出，如下图所示：<br><img src="git/8.png"></p><p>在该窗口中，我们通过输入如下指令并回车，来检查Git环境是否安装成功：<br>git –version</p><p>我这边显示的情况如下图所示：<br><img src="git/9.png"><br>只要能显示出类似“git version 2.30.0.windows.2”的信息，就表示当前电脑上Git环境已经安装好了。</p><h1 id="二、安装Node-js环境"><a href="#二、安装Node-js环境" class="headerlink" title="二、安装Node.js环境"></a>二、安装Node.js环境</h1><p>一个能够在服务器端运行JavaScript代码的环境，主要是为了使用它的包管理工具npm，所以不需要先系统的学习node.js的知识。npm是node.js的包管理工具，跟Python的pip工具作用一样，可以用它来安装依赖库和三方工具。我们主要是使用npm来安装Hexo。</p><h2 id="2-1-获取Node-js安装包"><a href="#2-1-获取Node-js安装包" class="headerlink" title="2.1 获取Node.js安装包"></a>2.1 获取Node.js安装包</h2><p>百度搜索“node.js”，搜索结果如下图所示：<br><img src="node.js/1.png"></p><p>选择并点击“node.js官网”，或直接访问<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>可以看到如下图所示界面：<br><img src="node.js/2.png"></p><p>可以看到官网有两个版本的Node.js可以选择，这里我选择下载的是当前最新的版本。单击即可下载对应版本的Node.js。<br>如果下载速度很慢的话，大家也可以通过本文文首或者文末的百度网盘链接进行下载~<br>下载完成后，会得到一个以msi尾缀结尾的文件，如下图所示：<br><img src="node.js/3.png"></p><h2 id="2-2-安装Node-js"><a href="#2-2-安装Node-js" class="headerlink" title="2.2 安装Node.js"></a>2.2 安装Node.js</h2><p>双击运行上图所示的安装文件，弹出窗口如下图所示：<br><img src="node.js/4.png"></p><p>接下来的安装步骤很简单，如果没有特殊需求的话，按照提示一路默认操作即可。直至弹出如下图所示的窗口：<br><img src="node.js/5.png"></p><h2 id="2-3-查询Node-js版本"><a href="#2-3-查询Node-js版本" class="headerlink" title="2.3 查询Node.js版本"></a>2.3 查询Node.js版本</h2><p>在电脑上任意空白位置单击鼠标右键，并选择“Git Bash Here”，输入如下指令并回车：<br>node –version</p><p>如果得到如下图所示结果：<br><img src="node.js/6.png"><br>如果返回结果提示类似“v15.6.0”的信息，就表示当前电脑上Node.js环境已经安装好了。</p><p>如果得到如下图所示结果：<br><img src="node.js/7.png"><br>如果返回结果提示“bash: node: command not found”，首先查看电脑上是否有早先打开的Git Bash窗口，如果有，尝试将所有的Git Bash窗口关闭再重新打开，然后再尝试查询Node.js的版本信息。如果还是失败，建议重新再进行一遍安装操作。</p><h2 id="2-4-查询npm版本"><a href="#2-4-查询npm版本" class="headerlink" title="2.4 查询npm版本"></a>2.4 查询npm版本</h2><p>一般在安装Node.js的同时，npm也会被一起安装了。我们可以输入如下指令并回车，来查询npm的版本：<br>npm –version<br><img src="node.js/8.png"><br>由上图可以看出与Node.js一起被安装的npm的版本为7.4.0。</p><h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h1><h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a>3.1 安装Hexo</h2><p>在电脑上任意空白位置单击鼠标右键，并选择“Git Bash Here”，输入如下指令并回车，以开始安装Hexo：<br>npm install hexo-cli -g<br>等Hexo安装完成之后，Git Bash中显示如下图所示：<br><img src="hexo/1.png"></p><h2 id="3-2-查询Hexo版本"><a href="#3-2-查询Hexo版本" class="headerlink" title="3.2 查询Hexo版本"></a>3.2 查询Hexo版本</h2><p>在Git Bash中输入如下指令并回车：<br>hexo version</p><p>如果得到如下图所示或类似的结果：<br><img src="hexo/2.png"><br>就表示当前电脑上Hexo的环境已经安装好了。</p><p>如果得到如下图所示或类似的结果：<br><img src="hexo/3.png"><br>就表示Hexo的安装失败了，建议重新再进行一遍安装操作。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-04：六大常用静态网站托管平台</title>
      <link href="/personal-website-4/"/>
      <url>/personal-website-4/</url>
      
        <content type="html"><![CDATA[<p>正在加紧更新中…</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-03：十大常用静态网页生成工具</title>
      <link href="/personal-website-3/"/>
      <url>/personal-website-3/</url>
      
        <content type="html"><![CDATA[<p>正在加紧更新中…</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-02：静态网页搭建博客网站原理解析</title>
      <link href="/personal-website-2/"/>
      <url>/personal-website-2/</url>
      
        <content type="html"><![CDATA[<p>在个人网站博客的开发过程中，我们主要会涉及到两个目录：</p><ul><li>一个目录用来存放hexo源码文件，主要包括我们平时写文章用到的文字、图片、主题等等，我们姑且称之为<strong>“源码目录”</strong>；</li><li>一个目录用来存放通过hexo源码文件编译生成的静态网页文件，这些文件主要用来部署网站，我们姑且称之为<strong>“部署目录”</strong>。</li></ul><h1 id="一、Hexo源码与网站部署解析"><a href="#一、Hexo源码与网站部署解析" class="headerlink" title="一、Hexo源码与网站部署解析"></a>一、Hexo源码与网站部署解析</h1><p><strong>为了更加现代化地进行创作，比如团队多作者协同创作、单用户多计算机创作、在线创作等等。</strong>使用Git对上述“源码目录”和“部署目录”进行有效管理是一条必经之路。如何使用Git对“源码目录”和“部署目录”进行有效管理，粗略可以分为如下两种方式。</p><h2 id="1-1-两个Git仓库管理"><a href="#1-1-两个Git仓库管理" class="headerlink" title="1.1 两个Git仓库管理"></a>1.1 两个Git仓库管理</h2><p>一般最简单的办法，就是创建两个Git仓库，一个用来存放“源码目录”，另一个用来存放“部署目录”。这种方式在逻辑上理解起来最为容易，对于新手来说也非常推荐使用这种方式。然后由于实际需要维护两个Git仓库，个人觉得不够精简。</p><h2 id="1-2-单一Git仓库管理"><a href="#1-2-单一Git仓库管理" class="headerlink" title="1.2 单一Git仓库管理"></a>1.2 单一Git仓库管理</h2><p>另一种方式就是将这两个Git仓库合二为一，使用一个仓库同时存放“源码目录”和“部署目录”，依靠Git仓库中不同的分支来进行区分。这种方式在逻辑上理解起来稍微复杂一些，对于创作者在Git的理解和使用上的要求也稍微高一些。但一旦掌握之后，会比上面一种方式要更加高效一些。</p>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客网站教程-01：目录</title>
      <link href="/personal-website-1/"/>
      <url>/personal-website-1/</url>
      
        <content type="html"><![CDATA[<p>本专题的目录安排如下：</p><ul><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-1/">搭建个人博客网站教程-01：目录</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-2/">搭建个人博客网站教程-02：静态网页搭建博客网站原理解析</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-3/">搭建个人博客网站教程-03：十大常用静态网页生成工具</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-4/">搭建个人博客网站教程-04：六大常用静态网站托管平台</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-5/">搭建个人博客网站教程-05：Hexo+GitHub Pages：搭建全局环境</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-6/">搭建个人博客网站教程-06：Hexo+GitHub Pages：搭建局部环境+运行验证</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-7/">搭建个人博客网站教程-07：Hexo+GitHub Pages：将网站部署到GitHub Pages上</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-8/">搭建个人博客网站教程-08：Hexo+GitHub Pages：用Git管理Hexo源码</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-9/">搭建个人博客网站教程-09：Hexo+GitHub Pages：更换Hexo主题（简单方式）</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-10/">搭建个人博客网站教程-10：Hexo+GitHub Pages：更换Hexo主题（submodule方式）</a><font color='red'>（更新中…）</font></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-11/">搭建个人博客网站教程-11：Hexo+GitHub Pages：日常写作与网站部署</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-12/">搭建个人博客网站教程-12：Hexo+GitHub Pages：解析域名</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-13/">搭建个人博客网站教程-13：Hexo+GitHub Pages：增加www域名解析</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-14/">搭建个人博客网站教程-14：Hexo+GitHub Pages：GitHub Actions自动部署</a></li><li>（点击链接-&gt;）<a href="https://oceanwang.top/personal-website-15/">搭建个人博客网站教程-15：Hexo+GitHub Pages：多电脑多用户协同创作</a><font color='red'>（更新中…）</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> personal website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal website </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
